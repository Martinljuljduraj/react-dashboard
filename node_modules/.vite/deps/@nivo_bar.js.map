{
  "version": 3,
  "sources": ["../../lodash/_baseFilter.js", "../../lodash/filter.js", "../../lodash/isNumber.js", "../../lodash/_arrayEach.js", "../../lodash/_baseAssign.js", "../../lodash/_baseAssignIn.js", "../../lodash/_copySymbols.js", "../../lodash/_getSymbolsIn.js", "../../lodash/_copySymbolsIn.js", "../../lodash/_getAllKeysIn.js", "../../lodash/_initCloneArray.js", "../../lodash/_cloneDataView.js", "../../lodash/_cloneRegExp.js", "../../lodash/_cloneSymbol.js", "../../lodash/_initCloneByTag.js", "../../lodash/_baseIsMap.js", "../../lodash/isMap.js", "../../lodash/_baseIsSet.js", "../../lodash/isSet.js", "../../lodash/_baseClone.js", "../../lodash/_baseSlice.js", "../../lodash/_parent.js", "../../lodash/_baseUnset.js", "../../lodash/_customOmitClone.js", "../../lodash/omit.js", "../../@nivo/annotations/src/props.ts", "../../@nivo/annotations/src/utils.ts", "../../@nivo/annotations/src/compute.ts", "../../@nivo/annotations/src/hooks.ts", "../../@nivo/annotations/src/AnnotationNote.tsx", "../../@nivo/annotations/src/AnnotationLink.tsx", "../../@nivo/annotations/src/CircleAnnotationOutline.tsx", "../../@nivo/annotations/src/DotAnnotationOutline.tsx", "../../@nivo/annotations/src/RectAnnotationOutline.tsx", "../../@nivo/annotations/src/Annotation.tsx", "../../@nivo/annotations/src/canvas.ts", "../../@nivo/canvas/src/roundedRect.ts", "../../@nivo/bar/src/BarAnnotations.tsx", "../../@nivo/bar/src/BarLegends.tsx", "../../@nivo/bar/src/BarItem.tsx", "../../@nivo/bar/src/BarTooltip.tsx", "../../@nivo/bar/src/props.ts", "../../@nivo/bar/src/compute/common.ts", "../../@nivo/bar/src/compute/grouped.ts", "../../@nivo/bar/src/compute/stacked.ts", "../../@nivo/bar/src/compute/legends.ts", "../../@nivo/bar/src/compute/totals.ts", "../../@nivo/bar/src/hooks.ts", "../../@nivo/bar/src/BarTotals.tsx", "../../@nivo/bar/src/Bar.tsx", "../../@nivo/bar/src/BarCanvas.tsx", "../../@nivo/bar/src/ResponsiveBar.tsx", "../../@nivo/bar/src/ResponsiveBarCanvas.tsx"],
  "sourcesContent": ["var baseEach = require('./_baseEach');\n\n/**\n * The base implementation of `_.filter` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction baseFilter(collection, predicate) {\n  var result = [];\n  baseEach(collection, function(value, index, collection) {\n    if (predicate(value, index, collection)) {\n      result.push(value);\n    }\n  });\n  return result;\n}\n\nmodule.exports = baseFilter;\n", "var arrayFilter = require('./_arrayFilter'),\n    baseFilter = require('./_baseFilter'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n\n/**\n * Iterates over elements of `collection`, returning an array of all elements\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * **Note:** Unlike `_.remove`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.reject\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': true },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * _.filter(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.filter(users, { 'age': 36, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.filter(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.filter(users, 'active');\n * // => objects for ['barney']\n *\n * // Combining several predicates using `_.overEvery` or `_.overSome`.\n * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));\n * // => objects for ['fred', 'barney']\n */\nfunction filter(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nmodule.exports = filter;\n", "var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar numberTag = '[object Number]';\n\n/**\n * Checks if `value` is classified as a `Number` primitive or object.\n *\n * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n * classified as numbers, use the `_.isFinite` method.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n * @example\n *\n * _.isNumber(3);\n * // => true\n *\n * _.isNumber(Number.MIN_VALUE);\n * // => true\n *\n * _.isNumber(Infinity);\n * // => true\n *\n * _.isNumber('3');\n * // => false\n */\nfunction isNumber(value) {\n  return typeof value == 'number' ||\n    (isObjectLike(value) && baseGetTag(value) == numberTag);\n}\n\nmodule.exports = isNumber;\n", "/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nmodule.exports = arrayEach;\n", "var copyObject = require('./_copyObject'),\n    keys = require('./keys');\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\nmodule.exports = baseAssign;\n", "var copyObject = require('./_copyObject'),\n    keysIn = require('./keysIn');\n\n/**\n * The base implementation of `_.assignIn` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssignIn(object, source) {\n  return object && copyObject(source, keysIn(source), object);\n}\n\nmodule.exports = baseAssignIn;\n", "var copyObject = require('./_copyObject'),\n    getSymbols = require('./_getSymbols');\n\n/**\n * Copies own symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\nmodule.exports = copySymbols;\n", "var arrayPush = require('./_arrayPush'),\n    getPrototype = require('./_getPrototype'),\n    getSymbols = require('./_getSymbols'),\n    stubArray = require('./stubArray');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own and inherited enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n  var result = [];\n  while (object) {\n    arrayPush(result, getSymbols(object));\n    object = getPrototype(object);\n  }\n  return result;\n};\n\nmodule.exports = getSymbolsIn;\n", "var copyObject = require('./_copyObject'),\n    getSymbolsIn = require('./_getSymbolsIn');\n\n/**\n * Copies own and inherited symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbolsIn(source, object) {\n  return copyObject(source, getSymbolsIn(source), object);\n}\n\nmodule.exports = copySymbolsIn;\n", "var baseGetAllKeys = require('./_baseGetAllKeys'),\n    getSymbolsIn = require('./_getSymbolsIn'),\n    keysIn = require('./keysIn');\n\n/**\n * Creates an array of own and inherited enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeysIn(object) {\n  return baseGetAllKeys(object, keysIn, getSymbolsIn);\n}\n\nmodule.exports = getAllKeysIn;\n", "/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = new array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\nmodule.exports = initCloneArray;\n", "var cloneArrayBuffer = require('./_cloneArrayBuffer');\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\nmodule.exports = cloneDataView;\n", "/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\nmodule.exports = cloneRegExp;\n", "var Symbol = require('./_Symbol');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\nmodule.exports = cloneSymbol;\n", "var cloneArrayBuffer = require('./_cloneArrayBuffer'),\n    cloneDataView = require('./_cloneDataView'),\n    cloneRegExp = require('./_cloneRegExp'),\n    cloneSymbol = require('./_cloneSymbol'),\n    cloneTypedArray = require('./_cloneTypedArray');\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return new Ctor;\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return new Ctor;\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\nmodule.exports = initCloneByTag;\n", "var getTag = require('./_getTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]';\n\n/**\n * The base implementation of `_.isMap` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n */\nfunction baseIsMap(value) {\n  return isObjectLike(value) && getTag(value) == mapTag;\n}\n\nmodule.exports = baseIsMap;\n", "var baseIsMap = require('./_baseIsMap'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsMap = nodeUtil && nodeUtil.isMap;\n\n/**\n * Checks if `value` is classified as a `Map` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n * @example\n *\n * _.isMap(new Map);\n * // => true\n *\n * _.isMap(new WeakMap);\n * // => false\n */\nvar isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\nmodule.exports = isMap;\n", "var getTag = require('./_getTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar setTag = '[object Set]';\n\n/**\n * The base implementation of `_.isSet` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n */\nfunction baseIsSet(value) {\n  return isObjectLike(value) && getTag(value) == setTag;\n}\n\nmodule.exports = baseIsSet;\n", "var baseIsSet = require('./_baseIsSet'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsSet = nodeUtil && nodeUtil.isSet;\n\n/**\n * Checks if `value` is classified as a `Set` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n * @example\n *\n * _.isSet(new Set);\n * // => true\n *\n * _.isSet(new WeakSet);\n * // => false\n */\nvar isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\nmodule.exports = isSet;\n", "var Stack = require('./_Stack'),\n    arrayEach = require('./_arrayEach'),\n    assignValue = require('./_assignValue'),\n    baseAssign = require('./_baseAssign'),\n    baseAssignIn = require('./_baseAssignIn'),\n    cloneBuffer = require('./_cloneBuffer'),\n    copyArray = require('./_copyArray'),\n    copySymbols = require('./_copySymbols'),\n    copySymbolsIn = require('./_copySymbolsIn'),\n    getAllKeys = require('./_getAllKeys'),\n    getAllKeysIn = require('./_getAllKeysIn'),\n    getTag = require('./_getTag'),\n    initCloneArray = require('./_initCloneArray'),\n    initCloneByTag = require('./_initCloneByTag'),\n    initCloneObject = require('./_initCloneObject'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isMap = require('./isMap'),\n    isObject = require('./isObject'),\n    isSet = require('./isSet'),\n    keys = require('./keys'),\n    keysIn = require('./keysIn');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (isSet(value)) {\n    value.forEach(function(subValue) {\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n  } else if (isMap(value)) {\n    value.forEach(function(subValue, key) {\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n  }\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nmodule.exports = baseClone;\n", "/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nmodule.exports = baseSlice;\n", "var baseGet = require('./_baseGet'),\n    baseSlice = require('./_baseSlice');\n\n/**\n * Gets the parent value at `path` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} path The path to get the parent value of.\n * @returns {*} Returns the parent value.\n */\nfunction parent(object, path) {\n  return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n}\n\nmodule.exports = parent;\n", "var castPath = require('./_castPath'),\n    last = require('./last'),\n    parent = require('./_parent'),\n    toKey = require('./_toKey');\n\n/**\n * The base implementation of `_.unset`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The property path to unset.\n * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n */\nfunction baseUnset(object, path) {\n  path = castPath(path, object);\n  object = parent(object, path);\n  return object == null || delete object[toKey(last(path))];\n}\n\nmodule.exports = baseUnset;\n", "var isPlainObject = require('./isPlainObject');\n\n/**\n * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\n * objects.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {string} key The key of the property to inspect.\n * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\n */\nfunction customOmitClone(value) {\n  return isPlainObject(value) ? undefined : value;\n}\n\nmodule.exports = customOmitClone;\n", "var arrayMap = require('./_arrayMap'),\n    baseClone = require('./_baseClone'),\n    baseUnset = require('./_baseUnset'),\n    castPath = require('./_castPath'),\n    copyObject = require('./_copyObject'),\n    customOmitClone = require('./_customOmitClone'),\n    flatRest = require('./_flatRest'),\n    getAllKeysIn = require('./_getAllKeysIn');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * The opposite of `_.pick`; this method creates an object composed of the\n * own and inherited enumerable property paths of `object` that are not omitted.\n *\n * **Note:** This method is considerably slower than `_.pick`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to omit.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.omit(object, ['a', 'c']);\n * // => { 'b': '2' }\n */\nvar omit = flatRest(function(object, paths) {\n  var result = {};\n  if (object == null) {\n    return result;\n  }\n  var isDeep = false;\n  paths = arrayMap(paths, function(path) {\n    path = castPath(path, object);\n    isDeep || (isDeep = path.length > 1);\n    return path;\n  });\n  copyObject(object, getAllKeysIn(object), result);\n  if (isDeep) {\n    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n  }\n  var length = paths.length;\n  while (length--) {\n    baseUnset(result, paths[length]);\n  }\n  return result;\n});\n\nmodule.exports = omit;\n", "export const defaultProps = {\n    dotSize: 4,\n    noteWidth: 120,\n    noteTextOffset: 8,\n    animate: true,\n}\n", "import {\n    AnnotationSpec,\n    CircleAnnotationSpec,\n    DotAnnotationSpec,\n    Note,\n    NoteCanvas,\n    NoteSvg,\n    RectAnnotationSpec,\n} from './types'\nimport { isValidElement } from 'react'\n\nexport const isSvgNote = <Datum>(note: Note<Datum>): note is NoteSvg<Datum> => {\n    const noteType = typeof note\n\n    return (\n        isValidElement(note) ||\n        noteType === 'string' ||\n        noteType === 'function' ||\n        noteType === 'object'\n    )\n}\n\nexport const isCanvasNote = <Datum>(note: Note<Datum>): note is NoteCanvas<Datum> => {\n    const noteType = typeof note\n\n    return noteType === 'string' || noteType === 'function'\n}\n\nexport const isCircleAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is CircleAnnotationSpec<Datum> => annotationSpec.type === 'circle'\n\nexport const isDotAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is DotAnnotationSpec<Datum> => annotationSpec.type === 'dot'\n\nexport const isRectAnnotation = <Datum>(\n    annotationSpec: AnnotationSpec<Datum>\n): annotationSpec is RectAnnotationSpec<Datum> => annotationSpec.type === 'rect'\n", "import filter from 'lodash/filter.js'\nimport isNumber from 'lodash/isNumber.js'\nimport omit from 'lodash/omit.js'\nimport {\n    radiansToDegrees,\n    normalizeAngleDegrees,\n    degreesToRadians,\n    positionFromAngle,\n} from '@nivo/core'\nimport { defaultProps } from './props'\nimport {\n    AnnotationPositionGetter,\n    AnnotationDimensionsGetter,\n    BoundAnnotation,\n    AnnotationMatcher,\n    AnnotationInstructions,\n} from './types'\nimport { isCircleAnnotation, isRectAnnotation } from './utils'\n\nexport const bindAnnotations = <\n    Datum = {\n        x: number\n        y: number\n    },\n>({\n    data,\n    annotations,\n    getPosition,\n    getDimensions,\n}: {\n    data: readonly Datum[]\n    annotations: readonly AnnotationMatcher<Datum>[]\n    getPosition: AnnotationPositionGetter<Datum>\n    getDimensions: AnnotationDimensionsGetter<Datum>\n}): BoundAnnotation<Datum>[] =>\n    annotations.reduce((acc: BoundAnnotation<Datum>[], annotation) => {\n        const offset = annotation.offset || 0\n\n        return [\n            ...acc,\n            ...filter<Datum>(data, annotation.match).map(datum => {\n                const position = getPosition(datum)\n                const dimensions = getDimensions(datum)\n\n                if (isCircleAnnotation(annotation) || isRectAnnotation(annotation)) {\n                    dimensions.size = dimensions.size + offset * 2\n                    dimensions.width = dimensions.width + offset * 2\n                    dimensions.height = dimensions.height + offset * 2\n                }\n\n                // acc.push({\n                //     ...omit(annotation, ['match', 'offset']),\n                //     ...position,\n                //     ...dimensions,\n                //     size: annotation.size || dimensions.size,\n                //     datum,\n                // } as any)\n                // return [\n                //     ...acc,\n                //     {\n                //         ...omit(annotation, ['match', 'offset']),\n                //         ...position,\n                //         ...dimensions,\n                //         size: annotation.size || dimensions.size,\n                //         datum,\n                //     },\n                // ]\n                return {\n                    ...omit(annotation, ['match', 'offset']),\n                    ...position,\n                    ...dimensions,\n                    size: annotation.size || dimensions.size,\n                    datum,\n                } as Required<BoundAnnotation<Datum>>\n            }),\n        ]\n\n        // return acc\n    }, [])\n\nexport const getLinkAngle = (\n    sourceX: number,\n    sourceY: number,\n    targetX: number,\n    targetY: number\n) => {\n    const angle = Math.atan2(targetY - sourceY, targetX - sourceX)\n\n    return normalizeAngleDegrees(radiansToDegrees(angle))\n}\n\nexport const computeAnnotation = <Datum>(\n    annotation: BoundAnnotation<Datum>\n): AnnotationInstructions => {\n    const {\n        x,\n        y,\n        noteX,\n        noteY,\n        noteWidth = defaultProps.noteWidth,\n        noteTextOffset = defaultProps.noteTextOffset,\n    } = annotation\n\n    let computedNoteX: number\n    let computedNoteY: number\n\n    if (isNumber(noteX)) {\n        computedNoteX = x + noteX\n    } else if (noteX.abs !== undefined) {\n        computedNoteX = noteX.abs\n    } else {\n        throw new Error(`noteX should be either a number or an object containing an 'abs' property`)\n    }\n\n    if (isNumber(noteY)) {\n        computedNoteY = y + noteY\n    } else if (noteY.abs !== undefined) {\n        computedNoteY = noteY.abs\n    } else {\n        throw new Error(`noteY should be either a number or an object containing an 'abs' property`)\n    }\n\n    let computedX = x\n    let computedY = y\n\n    const angle = getLinkAngle(x, y, computedNoteX, computedNoteY)\n\n    if (isCircleAnnotation<Datum>(annotation)) {\n        const position = positionFromAngle(degreesToRadians(angle), annotation.size / 2)\n        computedX += position.x\n        computedY += position.y\n    }\n\n    if (isRectAnnotation<Datum>(annotation)) {\n        const eighth = Math.round((angle + 90) / 45) % 8\n        if (eighth === 0) {\n            computedY -= annotation.height / 2\n        }\n        if (eighth === 1) {\n            computedX += annotation.width / 2\n            computedY -= annotation.height / 2\n        }\n        if (eighth === 2) {\n            computedX += annotation.width / 2\n        }\n        if (eighth === 3) {\n            computedX += annotation.width / 2\n            computedY += annotation.height / 2\n        }\n        if (eighth === 4) {\n            computedY += annotation.height / 2\n        }\n        if (eighth === 5) {\n            computedX -= annotation.width / 2\n            computedY += annotation.height / 2\n        }\n        if (eighth === 6) {\n            computedX -= annotation.width / 2\n        }\n        if (eighth === 7) {\n            computedX -= annotation.width / 2\n            computedY -= annotation.height / 2\n        }\n    }\n\n    let textX = computedNoteX\n    const textY = computedNoteY - noteTextOffset\n\n    let noteLineX = computedNoteX\n    const noteLineY = computedNoteY\n\n    if ((angle + 90) % 360 > 180) {\n        textX -= noteWidth\n        noteLineX -= noteWidth\n    } else {\n        noteLineX += noteWidth\n    }\n\n    return {\n        points: [\n            [computedX, computedY],\n            [computedNoteX, computedNoteY],\n            [noteLineX, noteLineY],\n        ] as [number, number][],\n        text: [textX, textY],\n        angle: angle + 90,\n    }\n}\n", "import { useMemo } from 'react'\nimport { bindAnnotations, computeAnnotation } from './compute'\nimport {\n    AnnotationDimensionsGetter,\n    AnnotationMatcher,\n    AnnotationPositionGetter,\n    BoundAnnotation,\n} from './types'\n\n/**\n * Bind annotations to a dataset.\n */\nexport const useAnnotations = <Datum>({\n    data,\n    annotations,\n    getPosition,\n    getDimensions,\n}: {\n    data: readonly Datum[]\n    annotations: readonly AnnotationMatcher<Datum>[]\n    getPosition: AnnotationPositionGetter<Datum>\n    getDimensions: AnnotationDimensionsGetter<Datum>\n}) =>\n    useMemo(\n        () =>\n            bindAnnotations<Datum>({\n                data,\n                annotations,\n                getPosition,\n                getDimensions,\n            }),\n        [data, annotations, getPosition, getDimensions]\n    )\n\nexport const useComputedAnnotations = <Datum>({\n    annotations,\n}: {\n    annotations: readonly BoundAnnotation<Datum>[]\n}) =>\n    useMemo(\n        () =>\n            annotations.map(annotation => ({\n                ...annotation,\n                computed: computeAnnotation<Datum>({\n                    ...annotation,\n                }),\n            })),\n        [annotations]\n    )\n\nexport const useComputedAnnotation = <Datum>(annotation: BoundAnnotation<Datum>) =>\n    useMemo(() => computeAnnotation<Datum>(annotation), [annotation])\n", "import { createElement } from 'react'\nimport omit from 'lodash/omit.js'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\nimport { NoteSvg } from './types'\n\nexport const AnnotationNote = <Datum,>({\n    datum,\n    x,\n    y,\n    note,\n}: {\n    datum: Datum\n    x: number\n    y: number\n    note: NoteSvg<Datum>\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    if (typeof note === 'function') {\n        return createElement(note, { x, y, datum })\n    }\n\n    return (\n        <>\n            {theme.annotations.text.outlineWidth > 0 && (\n                <animated.text\n                    x={animatedProps.x}\n                    y={animatedProps.y}\n                    style={{\n                        ...theme.annotations.text,\n                        strokeLinejoin: 'round',\n                        strokeWidth: theme.annotations.text.outlineWidth * 2,\n                        stroke: theme.annotations.text.outlineColor,\n                    }}\n                >\n                    {note}\n                </animated.text>\n            )}\n            <animated.text\n                x={animatedProps.x}\n                y={animatedProps.y}\n                style={omit(theme.annotations.text, ['outlineWidth', 'outlineColor'])}\n            >\n                {note}\n            </animated.text>\n        </>\n    )\n}\n", "import { useMemo } from 'react'\nimport { animated } from '@react-spring/web'\nimport { useAnimatedPath } from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\n\nexport const AnnotationLink = ({\n    points,\n    isOutline = false,\n}: {\n    points: [number, number][]\n    isOutline?: boolean\n}) => {\n    const theme = useTheme()\n\n    const path = useMemo(() => {\n        const [firstPoint, ...otherPoints] = points\n\n        return otherPoints.reduce(\n            (acc, [x, y]) => `${acc} L${x},${y}`,\n            `M${firstPoint[0]},${firstPoint[1]}`\n        )\n    }, [points])\n\n    const animatedPath = useAnimatedPath(path)\n\n    if (isOutline && theme.annotations.link.outlineWidth <= 0) {\n        return null\n    }\n\n    const style = { ...theme.annotations.link }\n    if (isOutline) {\n        style.strokeLinecap = 'square'\n        style.strokeWidth =\n            theme.annotations.link.strokeWidth + theme.annotations.link.outlineWidth * 2\n        style.stroke = theme.annotations.link.outlineColor\n        style.opacity = theme.annotations.link.outlineOpacity\n    }\n\n    return <animated.path fill=\"none\" d={animatedPath} style={style} />\n}\n", "import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\n\nexport const CircleAnnotationOutline = ({ x, y, size }: { x: number; y: number; size: number }) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size / 2,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.circle\n                    cx={animatedProps.x}\n                    cy={animatedProps.y}\n                    r={animatedProps.radius}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth:\n                            theme.annotations.outline.strokeWidth +\n                            theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                        opacity: theme.annotations.outline.outlineOpacity,\n                    }}\n                />\n            )}\n            <animated.circle\n                cx={animatedProps.x}\n                cy={animatedProps.y}\n                r={animatedProps.radius}\n                style={theme.annotations.outline}\n            />\n        </>\n    )\n}\n", "import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\nimport { defaultProps } from './props'\n\nexport const DotAnnotationOutline = ({\n    x,\n    y,\n    size = defaultProps.dotSize,\n}: {\n    x: number\n    y: number\n    size?: number\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size / 2,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.circle\n                    cx={animatedProps.x}\n                    cy={animatedProps.y}\n                    r={animatedProps.radius}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth: theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                        opacity: theme.annotations.outline.outlineOpacity,\n                    }}\n                />\n            )}\n            <animated.circle\n                cx={animatedProps.x}\n                cy={animatedProps.y}\n                r={animatedProps.radius}\n                style={theme.annotations.symbol}\n            />\n        </>\n    )\n}\n", "import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\n\nexport const RectAnnotationOutline = ({\n    x,\n    y,\n    width,\n    height,\n    borderRadius = 6,\n}: {\n    x: number\n    y: number\n    width: number\n    height: number\n    borderRadius?: number\n}) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x: x - width / 2,\n        y: y - height / 2,\n        width,\n        height,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {theme.annotations.outline.outlineWidth > 0 && (\n                <animated.rect\n                    x={animatedProps.x}\n                    y={animatedProps.y}\n                    rx={borderRadius}\n                    ry={borderRadius}\n                    width={animatedProps.width}\n                    height={animatedProps.height}\n                    style={{\n                        ...theme.annotations.outline,\n                        fill: 'none',\n                        strokeWidth:\n                            theme.annotations.outline.strokeWidth +\n                            theme.annotations.outline.outlineWidth * 2,\n                        stroke: theme.annotations.outline.outlineColor,\n                        opacity: theme.annotations.outline.outlineOpacity,\n                    }}\n                />\n            )}\n            <animated.rect\n                x={animatedProps.x}\n                y={animatedProps.y}\n                rx={borderRadius}\n                ry={borderRadius}\n                width={animatedProps.width}\n                height={animatedProps.height}\n                style={theme.annotations.outline}\n            />\n        </>\n    )\n}\n", "import { useComputedAnnotation } from './hooks'\nimport { AnnotationNote } from './AnnotationNote'\nimport { AnnotationLink } from './AnnotationLink'\nimport { CircleAnnotationOutline } from './CircleAnnotationOutline'\nimport { DotAnnotationOutline } from './DotAnnotationOutline'\nimport { RectAnnotationOutline } from './RectAnnotationOutline'\nimport { BoundAnnotation } from './types'\nimport { isCircleAnnotation, isDotAnnotation, isRectAnnotation, isSvgNote } from './utils'\n\nexport const Annotation = <Datum,>(annotation: BoundAnnotation<Datum>) => {\n    const { datum, x, y, note } = annotation\n    const computed = useComputedAnnotation(annotation)\n\n    if (!isSvgNote(note)) {\n        throw new Error('note should be a valid react element')\n    }\n\n    return (\n        <>\n            <AnnotationLink points={computed.points} isOutline={true} />\n            {isCircleAnnotation(annotation) && (\n                <CircleAnnotationOutline x={x} y={y} size={annotation.size} />\n            )}\n            {isDotAnnotation(annotation) && (\n                <DotAnnotationOutline x={x} y={y} size={annotation.size} />\n            )}\n            {isRectAnnotation(annotation) && (\n                <RectAnnotationOutline\n                    x={x}\n                    y={y}\n                    width={annotation.width}\n                    height={annotation.height}\n                    borderRadius={annotation.borderRadius}\n                />\n            )}\n            <AnnotationLink points={computed.points} />\n            <AnnotationNote datum={datum} x={computed.text[0]} y={computed.text[1]} note={note} />\n        </>\n    )\n}\n", "import { Theme } from '@nivo/theming'\nimport { ComputedAnnotation } from './types'\nimport { isCanvasNote, isCircleAnnotation, isDotAnnotation, isRectAnnotation } from './utils'\n\nconst drawPoints = (ctx: CanvasRenderingContext2D, points: [number, number][]) => {\n    points.forEach(([x, y], index) => {\n        if (index === 0) {\n            ctx.moveTo(x, y)\n        } else {\n            ctx.lineTo(x, y)\n        }\n    })\n}\n\nexport const renderAnnotationsToCanvas = <Datum>(\n    ctx: CanvasRenderingContext2D,\n    {\n        annotations,\n        theme,\n    }: {\n        annotations: ComputedAnnotation<Datum>[]\n        theme: Theme\n    }\n) => {\n    if (annotations.length === 0) return\n\n    ctx.save()\n    annotations.forEach(annotation => {\n        if (!isCanvasNote(annotation.note)) {\n            throw new Error('note is invalid for canvas implementation')\n        }\n\n        if (theme.annotations.link.outlineWidth > 0) {\n            ctx.lineCap = 'square'\n            ctx.strokeStyle = theme.annotations.link.outlineColor\n            ctx.lineWidth =\n                theme.annotations.link.strokeWidth + theme.annotations.link.outlineWidth * 2\n            ctx.beginPath()\n            drawPoints(ctx, annotation.computed.points)\n            ctx.stroke()\n            ctx.lineCap = 'butt'\n        }\n\n        if (isCircleAnnotation(annotation) && theme.annotations.outline.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.outline.outlineColor\n            ctx.lineWidth =\n                theme.annotations.outline.strokeWidth + theme.annotations.outline.outlineWidth * 2\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isDotAnnotation(annotation) && theme.annotations.symbol.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.symbol.outlineColor\n            ctx.lineWidth = theme.annotations.symbol.outlineWidth * 2\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isRectAnnotation(annotation) && theme.annotations.outline.outlineWidth > 0) {\n            ctx.strokeStyle = theme.annotations.outline.outlineColor\n            ctx.lineWidth =\n                theme.annotations.outline.strokeWidth + theme.annotations.outline.outlineWidth * 2\n            ctx.beginPath()\n            ctx.rect(\n                annotation.x - annotation.width / 2,\n                annotation.y - annotation.height / 2,\n                annotation.width,\n                annotation.height\n            )\n            ctx.stroke()\n        }\n\n        ctx.strokeStyle = theme.annotations.link.stroke\n        ctx.lineWidth = theme.annotations.link.strokeWidth\n        ctx.beginPath()\n        drawPoints(ctx, annotation.computed.points)\n        ctx.stroke()\n\n        if (isCircleAnnotation(annotation)) {\n            ctx.strokeStyle = theme.annotations.outline.stroke\n            ctx.lineWidth = theme.annotations.outline.strokeWidth\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.stroke()\n        }\n\n        if (isDotAnnotation(annotation)) {\n            ctx.fillStyle = theme.annotations.symbol.fill\n            ctx.beginPath()\n            ctx.arc(annotation.x, annotation.y, annotation.size / 2, 0, 2 * Math.PI)\n            ctx.fill()\n        }\n\n        if (isRectAnnotation(annotation)) {\n            ctx.strokeStyle = theme.annotations.outline.stroke\n            ctx.lineWidth = theme.annotations.outline.strokeWidth\n            ctx.beginPath()\n            ctx.rect(\n                annotation.x - annotation.width / 2,\n                annotation.y - annotation.height / 2,\n                annotation.width,\n                annotation.height\n            )\n            ctx.stroke()\n        }\n\n        if (typeof annotation.note === 'function') {\n            annotation.note(ctx, {\n                datum: annotation.datum,\n                x: annotation.computed.text[0],\n                y: annotation.computed.text[1],\n                theme,\n            })\n        } else {\n            ctx.font = `${theme.annotations.text.fontSize}px ${theme.annotations.text.fontFamily}`\n            ctx.textAlign = 'left'\n            ctx.textBaseline = 'alphabetic'\n\n            ctx.fillStyle = theme.annotations.text.fill\n            ctx.strokeStyle = theme.annotations.text.outlineColor\n            ctx.lineWidth = theme.annotations.text.outlineWidth * 2\n\n            if (theme.annotations.text.outlineWidth > 0) {\n                ctx.lineJoin = 'round'\n                ctx.strokeText(\n                    annotation.note,\n                    annotation.computed.text[0],\n                    annotation.computed.text[1]\n                )\n                ctx.lineJoin = 'miter'\n            }\n            ctx.fillText(annotation.note, annotation.computed.text[0], annotation.computed.text[1])\n        }\n    })\n    ctx.restore()\n}\n", "export const roundedRect = (\n    ctx: CanvasRenderingContext2D,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    radius: number\n) => {\n    if (radius > 0) {\n        ctx.moveTo(x + radius, y)\n        ctx.lineTo(x + width - radius, y)\n        ctx.quadraticCurveTo(x + width, y, x + width, y + radius)\n        ctx.lineTo(x + width, y + height - radius)\n        ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height)\n        ctx.lineTo(x + radius, y + height)\n        ctx.quadraticCurveTo(x, y + height, x, y + height - radius)\n        ctx.lineTo(x, y + radius)\n        ctx.quadraticCurveTo(x, y, x + radius, y)\n        ctx.closePath()\n    } else {\n        ctx.rect(x, y, width, height)\n    }\n}\n", "import { Annotation, useAnnotations } from '@nivo/annotations'\nimport { BarAnnotationsProps } from './types'\n\nexport const BarAnnotations = <RawDatum,>({ bars, annotations }: BarAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useAnnotations({\n        data: bars,\n        annotations,\n        getPosition: bar => ({\n            x: bar.x + bar.width / 2,\n            y: bar.y + bar.height / 2,\n        }),\n        getDimensions: ({ height, width }) => ({\n            width,\n            height,\n            size: Math.max(width, height),\n        }),\n    })\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n", "import { BoxLegendSvg } from '@nivo/legends'\nimport { BarLegendProps, LegendData } from './types'\n\ninterface BarLegendsProps {\n    width: number\n    height: number\n    legends: [BarLegendProps, LegendData[]][]\n    toggleSerie: (id: string | number) => void\n}\n\nexport const BarLegends = ({ width, height, legends, toggleSerie }: BarLegendsProps) => (\n    <>\n        {legends.map(([legend, data], i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={width}\n                containerHeight={height}\n                data={legend.data ?? data}\n                toggleSerie={\n                    legend.toggleSerie && legend.dataFrom === 'keys' ? toggleSerie : undefined\n                }\n            />\n        ))}\n    </>\n)\n", "import { createElement, MouseEvent, useCallback, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/theming'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Text } from '@nivo/text'\nimport { BarDatum, BarItemProps } from './types'\n\nexport const BarItem = <RawDatum extends BarDatum>({\n    bar: { data, ...bar },\n\n    style: {\n        borderColor,\n        color,\n        height,\n        labelColor,\n        labelOpacity,\n        labelX,\n        labelY,\n        transform,\n        width,\n        textAnchor,\n    },\n\n    borderRadius,\n    borderWidth,\n\n    label,\n    shouldRenderLabel,\n\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    tooltip,\n\n    isFocusable,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    ariaDisabled,\n    ariaHidden,\n}: BarItemProps<RawDatum>) => {\n    const theme = useTheme()\n    const { showTooltipFromEvent, showTooltipAt, hideTooltip } = useTooltip()\n\n    const renderTooltip = useMemo(\n        () => () => createElement(tooltip, { ...bar, ...data }),\n        [tooltip, bar, data]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.({ color: bar.color, ...data }, event)\n        },\n        [bar, data, onClick]\n    )\n    const handleTooltip = useCallback(\n        (event: MouseEvent<SVGRectElement>) => showTooltipFromEvent(renderTooltip(), event),\n        [showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(data, event)\n            showTooltipFromEvent(renderTooltip(), event)\n        },\n        [data, onMouseEnter, showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(data, event)\n            hideTooltip()\n        },\n        [data, hideTooltip, onMouseLeave]\n    )\n\n    // extra handlers to allow keyboard navigation\n    const handleFocus = useCallback(() => {\n        showTooltipAt(renderTooltip(), [bar.absX + bar.width / 2, bar.absY])\n    }, [showTooltipAt, renderTooltip, bar])\n    const handleBlur = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    return (\n        <animated.g transform={transform}>\n            <animated.rect\n                width={to(width, value => Math.max(value, 0))}\n                height={to(height, value => Math.max(value, 0))}\n                rx={borderRadius}\n                ry={borderRadius}\n                fill={data.fill ?? color}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                focusable={isFocusable}\n                tabIndex={isFocusable ? 0 : undefined}\n                aria-label={ariaLabel ? ariaLabel(data) : undefined}\n                aria-labelledby={ariaLabelledBy ? ariaLabelledBy(data) : undefined}\n                aria-describedby={ariaDescribedBy ? ariaDescribedBy(data) : undefined}\n                aria-disabled={ariaDisabled ? ariaDisabled(data) : undefined}\n                aria-hidden={ariaHidden ? ariaHidden(data) : undefined}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleTooltip : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n                onFocus={isInteractive && isFocusable ? handleFocus : undefined}\n                onBlur={isInteractive && isFocusable ? handleBlur : undefined}\n                data-testid={`bar.item.${data.id}.${data.index}`}\n            />\n            {shouldRenderLabel && (\n                <Text\n                    x={labelX}\n                    y={labelY}\n                    textAnchor={textAnchor}\n                    dominantBaseline=\"central\"\n                    fillOpacity={labelOpacity}\n                    style={{\n                        ...theme.labels.text,\n                        // We don't want the label to intercept mouse events\n                        pointerEvents: 'none',\n                        fill: labelColor,\n                    }}\n                >\n                    {label}\n                </Text>\n            )}\n        </animated.g>\n    )\n}\n", "import { BarTooltipProps } from './types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nexport const BarTooltip = <RawDatum,>({ color, label, ...data }: BarTooltipProps<RawDatum>) => {\n    return <BasicTooltip id={label} value={data.formattedValue} enableChip={true} color={color} />\n}\n", "import { ScaleBandSpec, ScaleSpec } from '@nivo/scales'\nimport { defaultAxisProps } from '@nivo/axes'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { BarCanvasLayerId, BarLayerId, ComputedDatum } from './types'\nimport { BarItem } from './BarItem'\nimport { BarTooltip } from './BarTooltip'\n\nexport const defaultProps = {\n    indexBy: 'id',\n    keys: ['value'],\n    groupMode: 'stacked' as const,\n    layout: 'vertical' as const,\n    reverse: false,\n    minValue: 'auto' as const,\n    maxValue: 'auto' as const,\n    valueScale: { type: 'linear' } as ScaleSpec,\n    indexScale: { type: 'band', round: true } as ScaleBandSpec,\n    padding: 0.1,\n    innerPadding: 0,\n    axisTop: null,\n    axisRight: null,\n    axisBottom: defaultAxisProps,\n    axisLeft: defaultAxisProps,\n    enableGridX: false,\n    enableGridY: true,\n    enableLabel: true,\n    label: 'formattedValue',\n    labelPosition: 'middle' as const,\n    labelOffset: 0,\n    labelSkipWidth: 0,\n    labelSkipHeight: 0,\n    labelTextColor: { theme: 'labels.text.fill' },\n    colorBy: 'id' as const,\n    colors: { scheme: 'nivo' } as OrdinalColorScaleConfig,\n    borderRadius: 0,\n    borderWidth: 0,\n    borderColor: { from: 'color' } as InheritedColorConfig<any>,\n    isInteractive: true,\n    tooltip: BarTooltip,\n    tooltipLabel: <RawDatum>(datum: ComputedDatum<RawDatum>) => `${datum.id} - ${datum.indexValue}`,\n    legends: [],\n    initialHiddenIds: [],\n    annotations: [],\n    markers: [],\n    enableTotals: false,\n    totalsOffset: 10,\n}\n\nexport const svgDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'totals', 'markers', 'legends', 'annotations'] as BarLayerId[],\n    barComponent: BarItem,\n    defs: [],\n    fill: [],\n    animate: true,\n    motionConfig: 'default',\n    role: 'img',\n    isFocusable: false,\n}\n\nexport const canvasDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'totals', 'legends', 'annotations'] as BarCanvasLayerId[],\n    pixelRatio: typeof window !== 'undefined' ? (window.devicePixelRatio ?? 1) : 1,\n}\n", "import { ScaleBandSpec, ScaleBand, computeScale } from '@nivo/scales'\nimport { defaultProps } from '../props'\nimport { BarCommonProps, BarDatum } from '../types'\n\n/**\n * Generates indexed scale.\n */\nexport const getIndexScale = <RawDatum>(\n    data: readonly RawDatum[],\n    getIndex: (datum: RawDatum) => string,\n    padding: number,\n    indexScale: ScaleBandSpec,\n    size: number,\n    axis: 'x' | 'y'\n) => {\n    return (\n        computeScale(\n            indexScale,\n            { all: data.map(getIndex), min: 0, max: 0 },\n            size,\n            axis\n        ) as ScaleBand<string>\n    ).padding(padding)\n}\n\n/**\n * This method ensures all the provided keys exist in the entire series.\n */\nexport const normalizeData = <RawDatum>(data: readonly RawDatum[], keys: readonly string[]) =>\n    data.map(\n        item =>\n            ({\n                ...keys.reduce<Record<string, unknown>>((acc, key) => {\n                    acc[key] = null\n                    return acc\n                }, {}),\n                ...item,\n            }) as RawDatum\n    )\n\nexport const filterNullValues = <RawDatum extends Record<string, unknown>>(data: RawDatum) =>\n    Object.keys(data).reduce<Record<string, unknown>>((acc, key) => {\n        if (data[key]) {\n            acc[key] = data[key]\n        }\n        return acc\n    }, {}) as Exclude<RawDatum, null | undefined | false | '' | 0>\n\nexport const coerceValue = <T>(value: T) => [value, Number(value)] as const\n\nexport type BarLabelLayout = {\n    labelX: number\n    labelY: number\n    textAnchor: 'start' | 'middle' | 'end'\n}\n\n/**\n * Compute the label position and alignment based on a given position and offset.\n */\nexport function useComputeLabelLayout<RawDatum extends BarDatum>(\n    layout: BarCommonProps<RawDatum>['layout'] = defaultProps.layout,\n    reverse: BarCommonProps<RawDatum>['reverse'] = defaultProps.reverse,\n    labelPosition: BarCommonProps<RawDatum>['labelPosition'] = defaultProps.labelPosition,\n    labelOffset: BarCommonProps<RawDatum>['labelOffset'] = defaultProps.labelOffset\n): (width: number, height: number) => BarLabelLayout {\n    return (width: number, height: number) => {\n        // If the chart is reversed, we want to make sure the offset is also reversed\n        const computedLabelOffset = labelOffset * (reverse ? -1 : 1)\n\n        if (layout === 'horizontal') {\n            let x = width / 2\n            if (labelPosition === 'start') {\n                x = reverse ? width : 0\n            } else if (labelPosition === 'end') {\n                x = reverse ? 0 : width\n            }\n            return {\n                labelX: x + computedLabelOffset,\n                labelY: height / 2,\n                textAnchor: labelPosition === 'middle' ? 'middle' : reverse ? 'end' : 'start',\n            }\n        } else {\n            let y = height / 2\n            if (labelPosition === 'start') {\n                y = reverse ? 0 : height\n            } else if (labelPosition === 'end') {\n                y = reverse ? height : 0\n            }\n            return {\n                labelX: width / 2,\n                labelY: y - computedLabelOffset,\n                textAnchor: 'middle',\n            }\n        }\n    }\n}\n", "import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    data: readonly RawDatum[]\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    keys: string[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst gt = (value: number, other: number) => value > other\nconst lt = (value: number, other: number) => value < other\n\nconst range = (start: number, end: number) =>\n    Array.from(' '.repeat(end - start), (_, index) => start + index)\n\nconst clampToZero = (value: number) => (gt(value, 0) ? 0 : value)\nconst zeroIfNotFinite = (value: number) => (isFinite(value) ? value : 0)\n\n/**\n * Generates x/y scales & bars for vertical grouped bar chart.\n */\nconst generateVerticalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding = 0,\n        keys,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean,\n    yRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getY = (d: number) => (compare(d, 0) ? (yScale(d) ?? 0) : yRef)\n    const getHeight = (d: number, y: number) => (compare(d, 0) ? yRef - y : (yScale(d) ?? 0) - yRef)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, xScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = (xScale(indexValue) ?? 0) + barWidth * i + innerPadding * i\n            const y = getY(value)\n            const barHeight = getHeight(value, y)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal grouped bar chart.\n */\nconst generateHorizontalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getIndex,\n        getColor,\n        getTooltipLabel,\n        keys,\n        innerPadding = 0,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean,\n    xRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getX = (d: number) => (compare(d, 0) ? xRef : (xScale(d) ?? 0))\n    const getWidth = (d: number, x: number) => (compare(d, 0) ? (xScale(d) ?? 0) - xRef : xRef - x)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, yScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = getX(value)\n            const y = (yScale(indexValue) ?? 0) + barHeight * i + innerPadding * i\n            const barWidth = getWidth(value, x)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for grouped bar chart.\n */\nexport const generateGroupedBars = <RawDatum extends BarDatum>({\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    innerPadding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: readonly (string | number)[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const data = normalizeData(props.data, keys)\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const clampMin = scaleSpec.min === 'auto' ? clampToZero : (value: number) => value\n\n    const values = data\n        .reduce<number[]>((acc, entry) => [...acc, ...keys.map(k => entry[k] as number)], [])\n        .filter(Boolean)\n    const min = clampMin(Math.min(...values))\n    const max = zeroIfNotFinite(Math.max(...values))\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const bandwidth = (indexScale.bandwidth() - innerPadding * (keys.length - 1)) / keys.length\n    const params = [\n        { ...props, data, keys, innerPadding, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n        scale(0) ?? 0,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalGroupedBars(...params)\n                : generateHorizontalGroupedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n", "import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { Series, SeriesPoint, stack, stackOffsetDiverging } from 'd3-shape'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype StackDatum<RawDatum> = SeriesPoint<RawDatum>\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    stackedData: Series<RawDatum, string>[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst flattenDeep = <T>(arr: T[]): T =>\n    arr.some(Array.isArray) ? flattenDeep(([] as T[]).concat(...arr)) : (arr as unknown as T)\n\nconst filterZerosIfLog = (array: number[], type: string) =>\n    type === 'log' ? array.filter(num => num !== 0) : array\n\n/**\n * Generates x/y scales & bars for vertical stacked bar chart.\n */\nconst generateVerticalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getY = (d: StackDatum<RawDatum>) => yScale(d[reverse ? 0 : 1])\n    const getHeight = (d: StackDatum<RawDatum>, y: number) => (yScale(d[reverse ? 1 : 0]) ?? 0) - y\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        xScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const x = xScale(getIndex(d.data)) ?? 0\n            const y = (getY(d) ?? 0) + innerPadding * 0.5\n            const barHeight = getHeight(d, y) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal stacked bar chart.\n */\nconst generateHorizontalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getX = (d: StackDatum<RawDatum>) => xScale(d[reverse ? 1 : 0])\n    const getWidth = (d: StackDatum<RawDatum>, x: number) => (xScale(d[reverse ? 0 : 1]) ?? 0) - x\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        yScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const y = yScale(getIndex(d.data)) ?? 0\n            const x = (getX(d) ?? 0) + innerPadding * 0.5\n            const barWidth = getWidth(d, x) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for stacked bar chart.\n */\nexport const generateStackedBars = <RawDatum extends BarDatum>({\n    data,\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: readonly (string | number)[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const stackedData = stack<RawDatum, string>().keys(keys).offset(stackOffsetDiverging)(\n        normalizeData(data, keys)\n    )\n\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const values = filterZerosIfLog(\n        flattenDeep(stackedData as unknown as number[][]),\n        valueScale.type\n    )\n    const min = Math.min(...values)\n    const max = Math.max(...values)\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const innerPadding = props.innerPadding > 0 ? props.innerPadding : 0\n    const bandwidth = indexScale.bandwidth()\n    const params = [\n        { ...props, innerPadding, stackedData, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalStackedBars(...params)\n                : generateHorizontalStackedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n", "import {\n    BarDatum,\n    BarLegendProps,\n    BarSvgProps,\n    BarsWithHidden,\n    LegendData,\n    LegendLabelDatum,\n} from '../types'\nimport { getPropertyAccessor } from '@nivo/core'\nimport uniqBy from 'lodash/uniqBy.js'\n\nexport const getLegendDataForKeys = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    direction: BarLegendProps['direction'],\n    groupMode: NonNullable<BarSvgProps<RawDatum>['groupMode']>,\n    reverse: boolean,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.id,\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (\n        (layout === 'vertical' &&\n            groupMode === 'stacked' &&\n            direction === 'column' &&\n            reverse !== true) ||\n        (layout === 'horizontal' && groupMode === 'stacked' && reverse === true)\n    ) {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendDataForIndexes = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.indexValue ?? '',\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (layout === 'horizontal') {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendData = <RawDatum extends BarDatum>({\n    bars,\n    direction,\n    from,\n    groupMode,\n    layout,\n    legendLabel,\n    reverse,\n}: Pick<Required<BarSvgProps<RawDatum>>, 'layout' | 'groupMode' | 'reverse'> & {\n    bars: BarsWithHidden<RawDatum>\n    direction: BarLegendProps['direction']\n    from: BarLegendProps['dataFrom']\n    legendLabel: BarSvgProps<RawDatum>['legendLabel']\n}) => {\n    const getLegendLabel = getPropertyAccessor(\n        legendLabel ?? (from === 'indexes' ? 'indexValue' : 'id')\n    )\n\n    if (from === 'indexes') {\n        return getLegendDataForIndexes(bars, layout, getLegendLabel)\n    }\n\n    return getLegendDataForKeys(bars, layout, direction, groupMode, reverse, getLegendLabel)\n}\n", "import { AnyScale, ScaleBand } from '@nivo/scales'\nimport { defaultProps } from '../props'\nimport { BarCommonProps, BarDatum, ComputedBarDatum } from '../types'\n\nexport interface BarTotalsData {\n    key: string\n    x: number\n    y: number\n    value: number\n    formattedValue: string\n    animationOffset: number\n}\n\nexport const computeBarTotals = <RawDatum extends BarDatum>(\n    bars: ComputedBarDatum<RawDatum>[],\n    xScale: ScaleBand<string> | AnyScale,\n    yScale: ScaleBand<string> | AnyScale,\n    layout: BarCommonProps<RawDatum>['layout'] = defaultProps.layout,\n    groupMode: BarCommonProps<RawDatum>['groupMode'] = defaultProps.groupMode,\n    totalsOffset: number,\n    formatValue: (value: number) => string\n) => {\n    const totals = [] as BarTotalsData[]\n\n    if (bars.length === 0) return totals\n\n    const totalsByIndex = new Map<string | number, number>()\n\n    const barWidth = bars[0].width\n    const barHeight = bars[0].height\n\n    if (groupMode === 'stacked') {\n        const totalsPositivesByIndex = new Map<string | number, number>()\n\n        bars.forEach(bar => {\n            const { indexValue, value } = bar.data\n            updateTotalsByIndex(totalsByIndex, indexValue, Number(value))\n            updateTotalsPositivesByIndex(totalsPositivesByIndex, indexValue, Number(value))\n        })\n\n        totalsPositivesByIndex.forEach((totalsPositive, indexValue) => {\n            const indexTotal = totalsByIndex.get(indexValue) || 0\n\n            let xPosition: number\n            let yPosition: number\n            let animationOffset: number\n\n            if (layout === 'vertical') {\n                xPosition = xScale(indexValue)\n                yPosition = yScale(totalsPositive)\n                animationOffset = yScale(totalsPositive / 2)\n            } else {\n                xPosition = xScale(totalsPositive)\n                yPosition = yScale(indexValue)\n                animationOffset = xScale(totalsPositive / 2)\n            }\n\n            xPosition += layout === 'vertical' ? barWidth / 2 : totalsOffset\n            yPosition += layout === 'vertical' ? -totalsOffset : barHeight / 2\n\n            totals.push({\n                key: 'total_' + indexValue,\n                x: xPosition,\n                y: yPosition,\n                value: indexTotal,\n                formattedValue: formatValue(indexTotal),\n                animationOffset,\n            })\n        })\n    } else if (groupMode === 'grouped') {\n        const greatestValueByIndex = new Map<string | number, number>()\n        const numberOfBarsByIndex = new Map()\n\n        bars.forEach(bar => {\n            const { indexValue, value } = bar.data\n            updateTotalsByIndex(totalsByIndex, indexValue, Number(value))\n            updateGreatestValueByIndex(greatestValueByIndex, indexValue, Number(value))\n            updateNumberOfBarsByIndex(numberOfBarsByIndex, indexValue)\n        })\n\n        greatestValueByIndex.forEach((greatestValue, indexValue) => {\n            const indexTotal = totalsByIndex.get(indexValue) || 0\n            const numberOfBars = numberOfBarsByIndex.get(indexValue)\n\n            let xPosition: number\n            let yPosition: number\n            let animationOffset: number\n\n            if (layout === 'vertical') {\n                xPosition = xScale(indexValue)\n                yPosition = yScale(greatestValue)\n                animationOffset = yScale(greatestValue / 2)\n            } else {\n                xPosition = xScale(greatestValue)\n                yPosition = yScale(indexValue)\n                animationOffset = xScale(greatestValue / 2)\n            }\n\n            const indexBarsWidth = numberOfBars * barWidth\n            const indexBarsHeight = numberOfBars * barHeight\n\n            xPosition += layout === 'vertical' ? indexBarsWidth / 2 : totalsOffset\n            yPosition += layout === 'vertical' ? -totalsOffset : indexBarsHeight / 2\n\n            totals.push({\n                key: 'total_' + indexValue,\n                x: xPosition,\n                y: yPosition,\n                value: indexTotal,\n                formattedValue: formatValue(indexTotal),\n                animationOffset,\n            })\n        })\n    }\n    return totals\n}\n\n// this function is used to compute the total value for the indexes. The total value is later rendered on the chart\nexport const updateTotalsByIndex = (\n    totalsByIndex: Map<string | number, number>,\n    indexValue: string | number,\n    value: number\n) => {\n    const currentIndexValue = totalsByIndex.get(indexValue) || 0\n    totalsByIndex.set(indexValue, currentIndexValue + value)\n}\n\n// this function is used to compute only the positive values of the indexes. Useful to position the text right above the last stacked bar. It prevents overlapping in case of negative values\nexport const updateTotalsPositivesByIndex = (\n    totalsPositivesByIndex: Map<string | number, number>,\n    indexValue: string | number,\n    value: number\n) => {\n    const currentIndexValue = totalsPositivesByIndex.get(indexValue) || 0\n    totalsPositivesByIndex.set(indexValue, currentIndexValue + (value > 0 ? value : 0))\n}\n\n// this function is used to keep track of the highest value for the indexes. Useful to position the text above the longest grouped bar\nexport const updateGreatestValueByIndex = (\n    greatestValueByIndex: Map<string | number, number>,\n    indexValue: string | number,\n    value: number\n) => {\n    const currentGreatestValue = greatestValueByIndex.get(indexValue) || 0\n    greatestValueByIndex.set(indexValue, Math.max(currentGreatestValue, Number(value)))\n}\n\n// this function is used to save the number of bars for the indexes. Useful to position the text in the middle of the grouped bars\nexport const updateNumberOfBarsByIndex = (\n    numberOfBarsByIndex: Map<string | number, number>,\n    indexValue: string | number\n) => {\n    const currentNumberOfBars = numberOfBarsByIndex.get(indexValue) || 0\n    numberOfBarsByIndex.set(indexValue, currentNumberOfBars + 1)\n}\n", "import { useCallback, useMemo, useState } from 'react'\nimport { useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport { usePropertyAccessor, useValueFormatter, Margin } from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\nimport {\n    DataProps,\n    BarCommonProps,\n    BarDatum,\n    ComputedBarDatumWithValue,\n    LegendData,\n    BarLegendProps,\n} from './types'\nimport { defaultProps } from './props'\nimport { generateGroupedBars, generateStackedBars, getLegendData } from './compute'\nimport { computeBarTotals } from './compute/totals'\n\nexport const useBar = <RawDatum extends BarDatum>({\n    indexBy = defaultProps.indexBy,\n    keys = defaultProps.keys,\n    label = defaultProps.label,\n    tooltipLabel = defaultProps.tooltipLabel,\n    valueFormat,\n    colors = defaultProps.colors,\n    colorBy = defaultProps.colorBy,\n    borderColor = defaultProps.borderColor,\n    labelTextColor = defaultProps.labelTextColor,\n    groupMode = defaultProps.groupMode,\n    layout = defaultProps.layout,\n    reverse = defaultProps.reverse,\n    data,\n    minValue = defaultProps.minValue,\n    maxValue = defaultProps.maxValue,\n    margin,\n    width,\n    height,\n    padding = defaultProps.padding,\n    innerPadding = defaultProps.innerPadding,\n    valueScale = defaultProps.valueScale,\n    indexScale = defaultProps.indexScale,\n    initialHiddenIds = defaultProps.initialHiddenIds,\n    enableLabel = defaultProps.enableLabel,\n    labelSkipWidth = defaultProps.labelSkipWidth,\n    labelSkipHeight = defaultProps.labelSkipHeight,\n    legends = defaultProps.legends,\n    legendLabel,\n    totalsOffset = defaultProps.totalsOffset,\n}: {\n    indexBy?: BarCommonProps<RawDatum>['indexBy']\n    label?: BarCommonProps<RawDatum>['label']\n    tooltipLabel?: BarCommonProps<RawDatum>['tooltipLabel']\n    valueFormat?: BarCommonProps<RawDatum>['valueFormat']\n    colors?: BarCommonProps<RawDatum>['colors']\n    colorBy?: BarCommonProps<RawDatum>['colorBy']\n    borderColor?: BarCommonProps<RawDatum>['borderColor']\n    labelTextColor?: BarCommonProps<RawDatum>['labelTextColor']\n    groupMode?: BarCommonProps<RawDatum>['groupMode']\n    layout?: BarCommonProps<RawDatum>['layout']\n    reverse?: BarCommonProps<RawDatum>['reverse']\n    data: DataProps<RawDatum>['data']\n    keys?: BarCommonProps<RawDatum>['keys']\n    minValue?: BarCommonProps<RawDatum>['minValue']\n    maxValue?: BarCommonProps<RawDatum>['maxValue']\n    margin: Margin\n    width: number\n    height: number\n    padding?: BarCommonProps<RawDatum>['padding']\n    innerPadding?: BarCommonProps<RawDatum>['innerPadding']\n    valueScale?: BarCommonProps<RawDatum>['valueScale']\n    indexScale?: BarCommonProps<RawDatum>['indexScale']\n    initialHiddenIds?: BarCommonProps<RawDatum>['initialHiddenIds']\n    enableLabel?: BarCommonProps<RawDatum>['enableLabel']\n    labelSkipWidth?: BarCommonProps<RawDatum>['labelSkipWidth']\n    labelSkipHeight?: BarCommonProps<RawDatum>['labelSkipHeight']\n    legends?: BarCommonProps<RawDatum>['legends']\n    legendLabel?: BarCommonProps<RawDatum>['legendLabel']\n    totalsOffset?: BarCommonProps<RawDatum>['totalsOffset']\n}) => {\n    const [hiddenIds, setHiddenIds] = useState(initialHiddenIds ?? [])\n    const toggleSerie = useCallback((id: string | number) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const getIndex = usePropertyAccessor(indexBy)\n    const getLabel = usePropertyAccessor(label)\n    const getTooltipLabel = usePropertyAccessor(tooltipLabel)\n    const formatValue = useValueFormatter(valueFormat)\n\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale(colors, colorBy)\n    const getBorderColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        borderColor,\n        theme\n    )\n    const getLabelColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        labelTextColor,\n        theme\n    )\n\n    const generateBars = groupMode === 'grouped' ? generateGroupedBars : generateStackedBars\n    const { bars, xScale, yScale } = generateBars({\n        layout,\n        reverse,\n        data,\n        getIndex,\n        keys,\n        minValue,\n        maxValue,\n        width,\n        height,\n        getColor,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        hiddenIds,\n        formatValue,\n        getTooltipLabel,\n        margin,\n    })\n\n    const barsWithValue = useMemo(\n        () =>\n            bars\n                .filter(\n                    (bar): bar is ComputedBarDatumWithValue<RawDatum> => bar.data.value !== null\n                )\n                .map((bar, index) => ({\n                    ...bar,\n                    index,\n                })),\n        [bars]\n    )\n\n    const shouldRenderBarLabel = useCallback(\n        ({ width, height }: { height: number; width: number }) => {\n            if (!enableLabel) return false\n            if (labelSkipWidth > 0 && width < labelSkipWidth) return false\n            if (labelSkipHeight > 0 && height < labelSkipHeight) return false\n            return true\n        },\n        [enableLabel, labelSkipWidth, labelSkipHeight]\n    )\n\n    const legendData = useMemo(\n        () =>\n            keys.map(key => {\n                const bar = bars.find(bar => bar.data.id === key)\n\n                return { ...bar, data: { id: key, ...bar?.data, hidden: hiddenIds.includes(key) } }\n            }),\n        [hiddenIds, keys, bars]\n    )\n\n    const legendsWithData: [BarLegendProps, LegendData[]][] = useMemo(\n        () =>\n            legends.map(legend => {\n                const data = getLegendData({\n                    bars: legend.dataFrom === 'keys' ? legendData : bars,\n                    direction: legend.direction,\n                    from: legend.dataFrom,\n                    groupMode,\n                    layout,\n                    legendLabel,\n                    reverse,\n                })\n\n                return [legend, data]\n            }),\n        [legends, legendData, bars, groupMode, layout, legendLabel, reverse]\n    )\n\n    const barTotals = useMemo(\n        () => computeBarTotals(bars, xScale, yScale, layout, groupMode, totalsOffset, formatValue),\n        [bars, xScale, yScale, layout, groupMode, totalsOffset, formatValue]\n    )\n\n    return {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getIndex,\n        getLabel,\n        getTooltipLabel,\n        formatValue,\n        getColor,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        hiddenIds,\n        toggleSerie,\n        legendsWithData,\n        barTotals,\n    }\n}\n", "import { useTheme } from '@nivo/theming'\nimport { AnimationConfig, animated, useTransition } from '@react-spring/web'\nimport { BarCommonProps, BarDatum } from './types'\nimport { svgDefaultProps } from './props'\nimport { BarTotalsData } from './compute/totals'\n\ninterface Props<RawDatum extends BarDatum> {\n    data: BarTotalsData[]\n    springConfig: Partial<AnimationConfig>\n    animate: boolean\n    layout?: BarCommonProps<RawDatum>['layout']\n}\n\nexport const BarTotals = <RawDatum extends BarDatum>({\n    data,\n    springConfig,\n    animate,\n    layout = svgDefaultProps.layout,\n}: Props<RawDatum>) => {\n    const theme = useTheme()\n    const totalsTransition = useTransition<\n        BarTotalsData,\n        {\n            x: number\n            y: number\n            labelOpacity: number\n        }\n    >(data, {\n        keys: barTotal => barTotal.key,\n        from: barTotal => ({\n            x: layout === 'vertical' ? barTotal.x : barTotal.animationOffset,\n            y: layout === 'vertical' ? barTotal.animationOffset : barTotal.y,\n            labelOpacity: 0,\n        }),\n        enter: barTotal => ({\n            x: barTotal.x,\n            y: barTotal.y,\n            labelOpacity: 1,\n        }),\n        update: barTotal => ({\n            x: barTotal.x,\n            y: barTotal.y,\n            labelOpacity: 1,\n        }),\n        leave: barTotal => ({\n            x: layout === 'vertical' ? barTotal.x : barTotal.animationOffset,\n            y: layout === 'vertical' ? barTotal.animationOffset : barTotal.y,\n            labelOpacity: 0,\n        }),\n        config: springConfig,\n        immediate: !animate,\n        initial: animate ? undefined : null,\n    })\n\n    return totalsTransition((style, barTotal) => (\n        <animated.text\n            key={barTotal.key}\n            x={style.x}\n            y={style.y}\n            fillOpacity={style.labelOpacity}\n            style={{\n                ...theme.labels.text,\n                pointerEvents: 'none',\n            }}\n            fontWeight=\"bold\"\n            fontSize={theme.labels.text.fontSize}\n            fontFamily={theme.labels.text.fontFamily}\n            textAnchor={layout === 'vertical' ? 'middle' : 'start'}\n            alignmentBaseline={layout === 'vertical' ? 'alphabetic' : 'middle'}\n        >\n            {barTotal.formattedValue}\n        </animated.text>\n    ))\n}\n", "import { forwardRef, Ref, ReactElement } from 'react'\nimport { Axes, Grid } from '@nivo/axes'\nimport {\n    CartesianMarkers,\n    Container,\n    SvgWrapper,\n    // @ts-expect-error no types\n    bindDefs,\n    useDimensions,\n    useMotionConfig,\n    WithChartRef,\n} from '@nivo/core'\nimport { useTransition } from '@react-spring/web'\nimport { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport { BarAnnotations } from './BarAnnotations'\nimport { BarLegends } from './BarLegends'\nimport { useBar } from './hooks'\nimport { svgDefaultProps } from './props'\nimport {\n    BarCustomLayerProps,\n    BarDatum,\n    BarItemProps,\n    BarLayer,\n    BarLayerId,\n    BarSvgProps,\n    ComputedBarDatumWithValue,\n} from './types'\nimport { BarTotals } from './BarTotals'\nimport { useComputeLabelLayout } from './compute/common'\n\ntype InnerBarProps<RawDatum extends BarDatum> = Omit<\n    BarSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBar = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n    margin: partialMargin,\n    width,\n    height,\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n    valueScale,\n    indexScale,\n    padding,\n    innerPadding,\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n    layers = svgDefaultProps.layers as readonly BarLayer<RawDatum>[],\n    barComponent = svgDefaultProps.barComponent,\n    enableLabel = svgDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = svgDefaultProps.labelSkipWidth,\n    labelSkipHeight = svgDefaultProps.labelSkipHeight,\n    labelTextColor,\n    labelPosition = svgDefaultProps.labelPosition,\n    labelOffset = svgDefaultProps.labelOffset,\n    markers = svgDefaultProps.markers,\n    colorBy,\n    colors,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor,\n    annotations = svgDefaultProps.annotations,\n    legendLabel,\n    tooltipLabel,\n    valueFormat,\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    legends,\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    isFocusable = svgDefaultProps.isFocusable,\n    barAriaLabel,\n    barAriaLabelledBy,\n    barAriaDescribedBy,\n    barAriaHidden,\n    barAriaDisabled,\n    initialHiddenIds,\n    enableTotals = svgDefaultProps.enableTotals,\n    totalsOffset = svgDefaultProps.totalsOffset,\n    forwardedRef,\n}: InnerBarProps<RawDatum> & {\n    forwardedRef: Ref<SVGSVGElement>\n}) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        toggleSerie,\n        legendsWithData,\n        barTotals,\n        getColor,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        initialHiddenIds,\n        totalsOffset,\n    })\n\n    const computeLabelLayout = useComputeLabelLayout(layout, reverse, labelPosition, labelOffset)\n\n    const transition = useTransition<\n        ComputedBarDatumWithValue<RawDatum>,\n        {\n            borderColor: string\n            color: string\n            height: number\n            labelColor: string\n            labelOpacity: number\n            labelX: number\n            labelY: number\n            opacity: number\n            transform: string\n            width: number\n            textAnchor: BarItemProps<RawDatum>['style']['textAnchor']\n        }\n    >(barsWithValue, {\n        keys: bar => bar.key,\n        from: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            ...computeLabelLayout(bar.width, bar.height),\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        enter: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            ...computeLabelLayout(bar.width, bar.height),\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        update: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            ...computeLabelLayout(bar.width, bar.height),\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        leave: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            ...computeLabelLayout(bar.width, bar.height),\n            labelY: 0,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      ...computeLabelLayout(bar.width, bar.height),\n                      labelX: 0,\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        config: springConfig,\n        immediate: !animate,\n        initial: animate ? undefined : null,\n    })\n\n    const commonProps = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            isFocusable,\n            ariaLabel: barAriaLabel,\n            ariaLabelledBy: barAriaLabelledBy,\n            ariaDescribedBy: barAriaDescribedBy,\n            ariaHidden: barAriaHidden,\n            ariaDisabled: barAriaDisabled,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            getTooltipLabel,\n            isInteractive,\n            labelSkipHeight,\n            labelSkipWidth,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            isFocusable,\n            barAriaLabel,\n            barAriaLabelledBy,\n            barAriaDescribedBy,\n            barAriaHidden,\n            barAriaDisabled,\n        ]\n    )\n\n    const boundDefs = bindDefs(defs, bars, fill, {\n        dataKey: 'data',\n        targetKey: 'data.fill',\n    })\n\n    const layerById: Record<BarLayerId, ReactNode> = {\n        annotations: null,\n        axes: null,\n        bars: null,\n        grid: null,\n        legends: null,\n        markers: null,\n        totals: null,\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <BarAnnotations key=\"annotations\" bars={bars} annotations={annotations} />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Fragment key=\"bars\">\n                {transition((style, bar) =>\n                    createElement(barComponent, {\n                        ...commonProps,\n                        bar,\n                        style,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        label: getLabel(bar.data),\n                    })\n                )}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <BarLegends\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                legends={legendsWithData}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<number | string, number>\n                key=\"markers\"\n                markers={markers as any[]}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (v: number | string) => number}\n                yScale={yScale as (v: number) => number}\n            />\n        )\n    }\n\n    if (layers.includes('totals') && enableTotals) {\n        layerById.totals = (\n            <BarTotals\n                key=\"totals\"\n                data={barTotals}\n                springConfig={springConfig}\n                animate={animate}\n                layout={layout}\n            />\n        )\n    }\n\n    const layerContext: BarCustomLayerProps<RawDatum> = useMemo(\n        () => ({\n            ...commonProps,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendData: legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getColor,\n        }),\n        [\n            commonProps,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getColor,\n        ]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n            isFocusable={isFocusable}\n            ref={forwardedRef}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Bar = forwardRef(\n    <RawDatum extends BarDatum>(\n        {\n            isInteractive = svgDefaultProps.isInteractive,\n            animate = svgDefaultProps.animate,\n            motionConfig = svgDefaultProps.motionConfig,\n            theme,\n            renderWrapper,\n            ...props\n        }: BarSvgProps<RawDatum>,\n        ref: Ref<SVGSVGElement>\n    ) => (\n        <Container\n            animate={animate}\n            isInteractive={isInteractive}\n            motionConfig={motionConfig}\n            renderWrapper={renderWrapper}\n            theme={theme}\n        >\n            <InnerBar<RawDatum> isInteractive={isInteractive} {...props} forwardedRef={ref} />\n        </Container>\n    )\n) as <RawDatum extends BarDatum>(\n    props: WithChartRef<BarSvgProps<RawDatum>, SVGSVGElement>\n) => ReactElement\n", "import {\n    createElement,\n    forwardRef,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    ReactElement,\n    Ref,\n} from 'react'\nimport {\n    Container,\n    Margin,\n    getRelativeCursor,\n    isCursorInRect,\n    useDimensions,\n    useValueFormatter,\n    WithChartRef,\n    mergeRefs,\n} from '@nivo/core'\nimport { Theme, useTheme } from '@nivo/theming'\nimport { setCanvasFont, drawCanvasText } from '@nivo/text'\nimport { roundedRect } from '@nivo/canvas'\nimport { canvasDefaultProps } from './props'\nimport {\n    renderAnnotationsToCanvas,\n    useAnnotations,\n    useComputedAnnotations,\n} from '@nivo/annotations'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    BarCanvasCustomLayerProps,\n    BarCanvasLayer,\n    BarCanvasProps,\n    BarCommonProps,\n    BarDatum,\n    ComputedBarDatum,\n} from './types'\nimport { useBar } from './hooks'\nimport { BarTotalsData } from './compute/totals'\nimport { useComputeLabelLayout } from './compute/common'\n\ntype InnerBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n> & {\n    forwardedRef: Ref<HTMLCanvasElement>\n}\n\nconst findBarUnderCursor = <RawDatum,>(\n    nodes: ComputedBarDatum<RawDatum>[],\n    margin: Margin,\n    x: number,\n    y: number\n) =>\n    nodes.find(node =>\n        isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y)\n    )\n\nconst isNumber = (value: unknown): value is number => typeof value === 'number'\n\nfunction renderTotalsToCanvas<RawDatum extends BarDatum>(\n    ctx: CanvasRenderingContext2D,\n    barTotals: BarTotalsData[],\n    theme: Theme,\n    layout: BarCommonProps<RawDatum>['layout'] = canvasDefaultProps.layout\n) {\n    setCanvasFont(ctx, theme.labels.text)\n    ctx.textBaseline = layout === 'vertical' ? 'alphabetic' : 'middle'\n    ctx.textAlign = layout === 'vertical' ? 'center' : 'start'\n\n    barTotals.forEach(barTotal => {\n        drawCanvasText(ctx, theme.labels.text, barTotal.formattedValue, barTotal.x, barTotal.y)\n    })\n}\n\nconst InnerBarCanvas = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n    margin: partialMargin,\n    width,\n    height,\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n    valueScale,\n    indexScale,\n    padding,\n    innerPadding,\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    enableGridX = canvasDefaultProps.enableGridX,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n    labelPosition = canvasDefaultProps.labelPosition,\n    labelOffset = canvasDefaultProps.labelOffset,\n    layers = canvasDefaultProps.layers as BarCanvasLayer<RawDatum>[],\n    renderBar = (\n        ctx,\n        {\n            bar: { color, height, width, x, y },\n            borderColor,\n            borderRadius,\n            borderWidth,\n            label,\n            shouldRenderLabel,\n            labelStyle,\n            labelX,\n            labelY,\n            textAnchor,\n        }\n    ) => {\n        ctx.fillStyle = color\n        if (borderWidth > 0) {\n            ctx.strokeStyle = borderColor\n            ctx.lineWidth = borderWidth\n        }\n\n        ctx.beginPath()\n        roundedRect(ctx, x, y, width, height, Math.min(borderRadius, height))\n        ctx.fill()\n\n        if (borderWidth > 0) {\n            ctx.stroke()\n        }\n\n        if (shouldRenderLabel) {\n            ctx.textBaseline = 'middle'\n            ctx.textAlign = textAnchor === 'middle' ? 'center' : textAnchor\n            drawCanvasText(ctx, labelStyle, label, x + labelX, y + labelY)\n        }\n    },\n    enableLabel = canvasDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = canvasDefaultProps.labelSkipWidth,\n    labelSkipHeight = canvasDefaultProps.labelSkipHeight,\n    labelTextColor,\n    colorBy,\n    colors,\n    borderRadius = canvasDefaultProps.borderRadius,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor,\n    annotations = canvasDefaultProps.annotations,\n    legendLabel,\n    tooltipLabel,\n    valueFormat,\n    isInteractive = canvasDefaultProps.isInteractive,\n    tooltip = canvasDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    legends,\n    pixelRatio = canvasDefaultProps.pixelRatio,\n    role,\n    forwardedRef,\n    enableTotals = canvasDefaultProps.enableTotals,\n    totalsOffset = canvasDefaultProps.totalsOffset,\n}: InnerBarCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const theme = useTheme()\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        legendsWithData,\n        barTotals,\n        getColor,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        totalsOffset,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    // Using any because return type isn't correct\n    const boundAnnotations: any = useComputedAnnotations({\n        annotations: useAnnotations({\n            data: bars,\n            annotations,\n            getPosition: node => ({\n                x: node.x,\n                y: node.y,\n            }),\n            getDimensions: ({ width, height }) => ({\n                width,\n                height,\n                size: Math.max(width, height),\n            }),\n        }),\n    })\n\n    // We use `any` here until we can figure out the best way to type xScale/yScale\n    const layerContext: BarCanvasCustomLayerProps<RawDatum> = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            isFocusable: false,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendData: legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getColor,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getColor,\n        ]\n    )\n\n    const formatValue = useValueFormatter(valueFormat)\n    const computeLabelLayout = useComputeLabelLayout(layout, reverse, labelPosition, labelOffset)\n\n    useEffect(() => {\n        const ctx = canvasEl.current?.getContext('2d')\n\n        if (!canvasEl.current) return\n        if (!ctx) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                if (isNumber(theme.grid.line.strokeWidth) && theme.grid.line.strokeWidth > 0) {\n                    ctx.lineWidth = theme.grid.line.strokeWidth\n                    ctx.strokeStyle = theme.grid.line.stroke as string\n\n                    if (enableGridX) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width: innerWidth,\n                            height: innerHeight,\n                            scale: xScale,\n                            axis: 'x',\n                            values: gridXValues,\n                        })\n                    }\n\n                    if (enableGridY) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width: innerWidth,\n                            height: innerHeight,\n                            scale: yScale,\n                            axis: 'y',\n                            values: gridYValues,\n                        })\n                    }\n                }\n            } else if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale: xScale,\n                    yScale: yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            } else if (layer === 'bars') {\n                setCanvasFont(ctx, theme.text)\n\n                barsWithValue.forEach(bar => {\n                    renderBar(ctx, {\n                        bar,\n                        borderColor: getBorderColor(bar) as string,\n                        borderRadius,\n                        borderWidth,\n                        label: getLabel(bar.data),\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        labelStyle: {\n                            ...theme.labels.text,\n                            fill: getLabelColor(bar) as string,\n                        },\n                        ...computeLabelLayout(bar.width, bar.height),\n                    })\n                })\n            } else if (layer === 'legends') {\n                legendsWithData.forEach(([legend, data]) => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas(ctx, { annotations: boundAnnotations, theme })\n            } else if (layer === 'totals' && enableTotals) {\n                renderTotalsToCanvas(ctx, barTotals, theme, layout)\n            } else if (typeof layer === 'function') {\n                layer(ctx, layerContext)\n            }\n        })\n\n        ctx.save()\n    }, [\n        axisBottom,\n        axisLeft,\n        axisRight,\n        axisTop,\n        barsWithValue,\n        borderRadius,\n        borderWidth,\n        boundAnnotations,\n        enableGridX,\n        enableGridY,\n        getBorderColor,\n        getLabel,\n        getLabelColor,\n        gridXValues,\n        gridYValues,\n        groupMode,\n        height,\n        innerHeight,\n        innerWidth,\n        layerContext,\n        layers,\n        layout,\n        legendsWithData,\n        margin.left,\n        margin.top,\n        outerHeight,\n        outerWidth,\n        pixelRatio,\n        renderBar,\n        xScale,\n        yScale,\n        reverse,\n        shouldRenderBarLabel,\n        theme,\n        width,\n        barTotals,\n        enableTotals,\n        formatValue,\n        computeLabelLayout,\n    ])\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                showTooltipFromEvent(\n                    createElement(tooltip, {\n                        ...bar.data,\n                        color: bar.color,\n                        label: bar.label,\n                        value: Number(bar.data.value),\n                    }),\n                    event\n                )\n\n                if (event.type === 'mouseenter') {\n                    onMouseEnter?.(bar.data, event)\n                }\n            } else {\n                hideTooltip()\n            }\n        },\n        [hideTooltip, margin, onMouseEnter, bars, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            hideTooltip()\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar) {\n                onMouseLeave?.(bar.data, event)\n            }\n        },\n        [hideTooltip, margin, onMouseLeave, bars]\n    )\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                onClick?.({ ...bar.data, color: bar.color }, event)\n            }\n        },\n        [margin, onClick, bars]\n    )\n\n    return (\n        <canvas\n            ref={mergeRefs(canvasEl, forwardedRef)}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n            role={role}\n        />\n    )\n}\n\nexport const BarCanvas = forwardRef(\n    <RawDatum extends BarDatum>(\n        { isInteractive, renderWrapper, theme, ...props }: BarCanvasProps<RawDatum>,\n        ref: Ref<HTMLCanvasElement>\n    ) => (\n        <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n            <InnerBarCanvas<RawDatum> {...props} forwardedRef={ref} />\n        </Container>\n    )\n) as <RawDatum extends BarDatum>(\n    props: WithChartRef<BarCanvasProps<RawDatum>, HTMLCanvasElement>\n) => ReactElement\n", "import { forwardRef, Ref, ReactElement } from 'react'\nimport { ResponsiveWrapper, ResponsiveProps, WithChartRef } from '@nivo/core'\nimport { Bar } from './Bar'\nimport { BarDatum, BarSvgProps } from './types'\n\nexport const ResponsiveBar = forwardRef(\n    <RawDatum extends BarDatum>(\n        {\n            defaultWidth,\n            defaultHeight,\n            onResize,\n            debounceResize,\n            ...props\n        }: ResponsiveProps<BarSvgProps<RawDatum>>,\n        ref: Ref<SVGSVGElement>\n    ) => (\n        <ResponsiveWrapper\n            defaultWidth={defaultWidth}\n            defaultHeight={defaultHeight}\n            onResize={onResize}\n            debounceResize={debounceResize}\n        >\n            {({ width, height }) => (\n                <Bar<RawDatum> width={width} height={height} {...props} ref={ref} />\n            )}\n        </ResponsiveWrapper>\n    )\n) as <RawDatum extends BarDatum>(\n    props: WithChartRef<ResponsiveProps<BarSvgProps<RawDatum>>, SVGSVGElement>\n) => ReactElement\n", "import { ForwardedRef, forwardRef, ReactElement } from 'react'\nimport { ResponsiveWrapper, ResponsiveProps, WithChartRef } from '@nivo/core'\nimport { BarDatum, BarCanvasProps } from './types'\nimport { BarCanvas } from './BarCanvas'\n\nexport const ResponsiveBarCanvas = forwardRef(\n    <RawDatum extends BarDatum>(\n        {\n            defaultWidth,\n            defaultHeight,\n            onResize,\n            debounceResize,\n            ...props\n        }: ResponsiveProps<BarCanvasProps<RawDatum>>,\n        ref: ForwardedRef<HTMLCanvasElement>\n    ) => (\n        <ResponsiveWrapper\n            defaultWidth={defaultWidth}\n            defaultHeight={defaultHeight}\n            onResize={onResize}\n            debounceResize={debounceResize}\n        >\n            {({ width, height }) => (\n                <BarCanvas width={width} height={height} {...props} ref={ref} />\n            )}\n        </ResponsiveWrapper>\n    )\n) as <RawDatum extends BarDatum>(\n    props: WithChartRef<ResponsiveProps<BarCanvasProps<RawDatum>>, HTMLCanvasElement>\n) => ReactElement\n"],
  "mappings": "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",
  "names": ["collection", "key", "defaultProps", "dotSize", "noteWidth", "noteTextOffset", "animate", "isSvgNote", "note", "noteType", "isValidElement", "isCanvasNote", "isCircleAnnotation", "annotationSpec", "type", "isDotAnnotation", "isRectAnnotation", "bindAnnotations", "_ref", "data", "annotations", "getPosition", "getDimensions", "reduce", "acc", "annotation", "offset", "concat", "filter", "match", "map", "datum", "position", "dimensions", "size", "width", "height", "_extends", "omit", "getLinkAngle", "sourceX", "sourceY", "targetX", "targetY", "angle", "Math", "atan2", "normalizeAngleDegrees", "radiansToDegrees", "computeAnnotation", "computedNoteX", "computedNoteY", "x", "y", "noteX", "noteY", "_annotation$noteWidth", "_annotation$noteTextO", "isNumber", "abs", "Error", "computedX", "computedY", "positionFromAngle", "degreesToRadians", "eighth", "round", "textX", "noteLineX", "points", "text", "useAnnotations", "useMemo", "useComputedAnnotations", "_ref2", "computed", "useComputedAnnotation", "AnnotationNote", "theme", "useTheme", "_useMotionConfig", "useMotionConfig", "springConfig", "config", "animatedProps", "useSpring", "immediate", "createElement", "_jsxs", "_Fragment", "children", "outlineWidth", "_jsx", "animated", "style", "strokeLinejoin", "strokeWidth", "stroke", "outlineColor", "AnnotationLink", "_ref$isOutline", "isOutline", "path", "firstPoint", "slice", "animatedPath", "useAnimatedPath", "link", "strokeLinecap", "opacity", "outlineOpacity", "fill", "d", "CircleAnnotationOutline", "radius", "outline", "circle", "cx", "cy", "r", "DotAnnotationOutline", "_ref$size", "symbol", "RectAnnotationOutline", "_ref$borderRadius", "borderRadius", "rect", "rx", "ry", "Annotation", "drawPoints", "ctx", "forEach", "index", "moveTo", "lineTo", "renderAnnotationsToCanvas", "length", "save", "lineCap", "strokeStyle", "lineWidth", "beginPath", "arc", "PI", "fillStyle", "font", "fontSize", "fontFamily", "textAlign", "textBaseline", "lineJoin", "strokeText", "fillText", "restore", "roundedRect", "ctx", "x", "y", "width", "height", "radius", "moveTo", "lineTo", "quadraticCurveTo", "closePath", "rect", "BarAnnotations", "_ref", "bars", "annotations", "boundAnnotations", "useAnnotations", "data", "getPosition", "bar", "x", "width", "y", "height", "getDimensions", "_ref2", "size", "Math", "max", "_jsx", "_Fragment", "children", "map", "annotation", "i", "Annotation", "_extends", "BarLegends", "legends", "toggleSerie", "_legend$data", "legend", "BoxLegendSvg", "containerWidth", "containerHeight", "dataFrom", "undefined", "BarItem", "_data$fill", "_ref$bar", "_objectWithoutPropertiesLoose", "_excluded", "_ref$style", "style", "borderColor", "color", "labelColor", "labelOpacity", "labelX", "labelY", "transform", "textAnchor", "borderRadius", "borderWidth", "label", "shouldRenderLabel", "isInteractive", "onClick", "onMouseEnter", "onMouseLeave", "tooltip", "isFocusable", "ariaLabel", "ariaLabelledBy", "ariaDescribedBy", "ariaDisabled", "ariaHidden", "theme", "useTheme", "_useTooltip", "useTooltip", "showTooltipFromEvent", "showTooltipAt", "hideTooltip", "renderTooltip", "useMemo", "createElement", "handleClick", "useCallback", "event", "handleTooltip", "handleMouseEnter", "handleMouseLeave", "handleFocus", "absX", "absY", "handleBlur", "_jsxs", "animated", "g", "rect", "to", "value", "rx", "ry", "fill", "strokeWidth", "stroke", "focusable", "tabIndex", "onMouseMove", "onFocus", "onBlur", "id", "index", "Text", "dominantBaseline", "fillOpacity", "labels", "text", "pointerEvents", "BarTooltip", "BasicTooltip", "formattedValue", "enableChip", "defaultProps", "indexBy", "keys", "groupMode", "layout", "reverse", "minValue", "maxValue", "valueScale", "type", "indexScale", "round", "padding", "innerPadding", "axisTop", "axisRight", "axisBottom", "defaultAxisProps", "axisLeft", "enableGridX", "enableGridY", "enableLabel", "labelPosition", "labelOffset", "labelSkipWidth", "labelSkipHeight", "labelTextColor", "colorBy", "colors", "scheme", "from", "tooltipLabel", "datum", "indexValue", "initialHiddenIds", "markers", "enableTotals", "totalsOffset", "svgDefaultProps", "layers", "barComponent", "defs", "animate", "motionConfig", "role", "canvasDefaultProps", "pixelRatio", "window", "_window$devicePixelRa", "devicePixelRatio", "getIndexScale", "getIndex", "axis", "computeScale", "all", "min", "normalizeData", "item", "reduce", "acc", "key", "filterNullValues", "Object", "coerceValue", "Number", "useComputeLabelLayout", "computedLabelOffset", "gt", "other", "lt", "range", "start", "end", "Array", "repeat", "_", "clampToZero", "generateVerticalGroupedBars", "barWidth", "yRef", "formatValue", "getColor", "getTooltipLabel", "_ref$innerPadding", "xScale", "yScale", "margin", "compare", "cleanedData", "forEach", "domain", "length", "_xScale", "d", "_yScale", "_coerceValue", "rawValue", "barHeight", "_yScale2", "barData", "hidden", "push", "left", "top", "generateHorizontalGroupedBars", "xRef", "_ref2$innerPadding", "_yScale3", "_xScale2", "_coerceValue2", "_xScale3", "generateGroupedBars", "_ref3", "_scale", "_ref3$padding", "_ref3$innerPadding", "indexScaleConfig", "_ref3$hiddenIds", "hiddenIds", "props", "filter", "includes", "_ref4", "otherAxis", "scaleSpec", "clampMin", "values", "entry", "concat", "k", "Boolean", "apply", "isFinite", "scale", "_ref5", "bandwidth", "params", "flattenDeep", "arr", "some", "isArray", "generateVerticalStackedBars", "stackedData", "stackedDataItem", "_getY", "generateHorizontalStackedBars", "_getX", "generateStackedBars", "array", "_ref4$padding", "_ref4$hiddenIds", "stack", "offset", "stackOffsetDiverging", "num", "_ref6", "getLegendData", "direction", "legendLabel", "getLegendLabel", "getPropertyAccessor", "uniqBy", "_bar$data$indexValue", "_bar$color2", "_bar$color", "updateTotalsByIndex", "totalsByIndex", "currentIndexValue", "get", "set", "updateTotalsPositivesByIndex", "totalsPositivesByIndex", "updateGreatestValueByIndex", "greatestValueByIndex", "currentGreatestValue", "updateNumberOfBarsByIndex", "numberOfBarsByIndex", "currentNumberOfBars", "useBar", "_ref$indexBy", "_ref$keys", "_ref$label", "_ref$tooltipLabel", "valueFormat", "_ref$colors", "_ref$colorBy", "_ref$borderColor", "_ref$labelTextColor", "_ref$groupMode", "_ref$layout", "_ref$reverse", "_ref$minValue", "_ref$maxValue", "_ref$padding", "_ref$valueScale", "_ref$indexScale", "_ref$initialHiddenIds", "_ref$enableLabel", "_ref$labelSkipWidth", "_ref$labelSkipHeight", "_ref$legends", "_ref$totalsOffset", "_useState", "useState", "setHiddenIds", "state", "indexOf", "usePropertyAccessor", "getLabel", "useValueFormatter", "useOrdinalColorScale", "getBorderColor", "useInheritedColor", "getLabelColor", "_generateBars", "barsWithValue", "shouldRenderBarLabel", "legendData", "find", "legendsWithData", "barTotals", "totals", "Map", "_bar$data", "totalsPositive", "xPosition", "yPosition", "animationOffset", "indexTotal", "_bar$data2", "greatestValue", "numberOfBars", "BarTotals", "springConfig", "useTransition", "barTotal", "enter", "update", "leave", "config", "immediate", "initial", "fontWeight", "fontSize", "fontFamily", "alignmentBaseline", "InnerBar", "partialMargin", "_ref$axisBottom", "_ref$axisLeft", "_ref$enableGridX", "_ref$enableGridY", "gridXValues", "gridYValues", "_ref$layers", "_ref$barComponent", "_ref$labelPosition", "_ref$labelOffset", "_ref$markers", "_ref$defs", "_ref$fill", "_ref$borderRadius", "_ref$borderWidth", "_ref$annotations", "_ref$isInteractive", "_ref$tooltip", "_ref$role", "_ref$isFocusable", "barAriaLabel", "barAriaLabelledBy", "barAriaDescribedBy", "barAriaHidden", "barAriaDisabled", "_ref$enableTotals", "forwardedRef", "_useMotionConfig", "useMotionConfig", "_useDimensions", "useDimensions", "outerWidth", "outerHeight", "innerWidth", "innerHeight", "_useBar", "computeLabelLayout", "transition", "commonProps", "boundDefs", "bindDefs", "dataKey", "targetKey", "layerById", "axes", "grid", "Axes", "right", "bottom", "Fragment", "Grid", "xValues", "yValues", "CartesianMarkers", "layerContext", "SvgWrapper", "ref", "layer", "_layerById$layer", "Bar", "forwardRef", "_ref2$isInteractive", "_ref2$animate", "_ref2$motionConfig", "renderWrapper", "Container", "findBarUnderCursor", "nodes", "node", "isCursorInRect", "InnerBarCanvas", "_ref$renderBar", "renderBar", "ctx", "_ref2$bar", "labelStyle", "fillStyle", "strokeStyle", "lineWidth", "beginPath", "roundedRect", "textBaseline", "textAlign", "drawCanvasText", "_ref$pixelRatio", "canvasEl", "useRef", "useComputedAnnotations", "useEffect", "_canvasEl$current", "current", "getContext", "background", "fillRect", "translate", "line", "renderGridLinesToCanvas", "renderAxesToCanvas", "setCanvasFont", "renderLegendToCanvas", "renderAnnotationsToCanvas", "save", "handleMouseHover", "_getRelativeCursor", "getRelativeCursor", "_getRelativeCursor2", "_getRelativeCursor3", "mergeRefs", "cursor", "BarCanvas", "ResponsiveBar", "defaultWidth", "defaultHeight", "onResize", "debounceResize", "ResponsiveWrapper", "ResponsiveBarCanvas"]
}
