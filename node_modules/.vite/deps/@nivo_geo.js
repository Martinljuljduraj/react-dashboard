import {
  $r,
  E2 as E,
  Gt,
  L,
  Mn,
  P,
  Rt,
  T,
  Vt,
  Ye,
  cn,
  format,
  kn,
  require_get,
  require_isFunction,
  z,
  z2
} from "./chunk-SJB3HMNW.js";
import "./chunk-A35ZXVDQ.js";
import {
  require_jsx_runtime
} from "./chunk-B2GAMZSM.js";
import {
  require_react
} from "./chunk-WHMHD7EJ.js";
import {
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/@nivo/geo/dist/nivo-geo.mjs
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_isFunction = __toESM(require_isFunction(), 1);
var import_get = __toESM(require_get(), 1);

// node_modules/d3-geo/src/adder.js
function adder_default() {
  return new Adder();
}
function Adder() {
  this.reset();
}
Adder.prototype = {
  constructor: Adder,
  reset: function() {
    this.s = // rounded value
    this.t = 0;
  },
  add: function(y) {
    add(temp, y, this.t);
    add(this, temp.s, this.s);
    if (this.s) this.t += temp.t;
    else this.s = temp.t;
  },
  valueOf: function() {
    return this.s;
  }
};
var temp = new Adder();
function add(adder, a, b) {
  var x = adder.s = a + b, bv = x - a, av = x - bv;
  adder.t = a - av + (b - bv);
}

// node_modules/d3-geo/src/math.js
var epsilon = 1e-6;
var epsilon2 = 1e-12;
var pi = Math.PI;
var halfPi = pi / 2;
var quarterPi = pi / 4;
var tau = pi * 2;
var degrees = 180 / pi;
var radians = pi / 180;
var abs = Math.abs;
var atan = Math.atan;
var atan2 = Math.atan2;
var cos = Math.cos;
var ceil = Math.ceil;
var exp = Math.exp;
var log = Math.log;
var sin = Math.sin;
var sign = Math.sign || function(x) {
  return x > 0 ? 1 : x < 0 ? -1 : 0;
};
var sqrt = Math.sqrt;
var tan = Math.tan;
function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}
function asin(x) {
  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);
}

// node_modules/d3-geo/src/noop.js
function noop() {
}

// node_modules/d3-geo/src/stream.js
function streamGeometry(geometry, stream) {
  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
    streamGeometryType[geometry.type](geometry, stream);
  }
}
var streamObjectType = {
  Feature: function(object2, stream) {
    streamGeometry(object2.geometry, stream);
  },
  FeatureCollection: function(object2, stream) {
    var features = object2.features, i2 = -1, n2 = features.length;
    while (++i2 < n2) streamGeometry(features[i2].geometry, stream);
  }
};
var streamGeometryType = {
  Sphere: function(object2, stream) {
    stream.sphere();
  },
  Point: function(object2, stream) {
    object2 = object2.coordinates;
    stream.point(object2[0], object2[1], object2[2]);
  },
  MultiPoint: function(object2, stream) {
    var coordinates2 = object2.coordinates, i2 = -1, n2 = coordinates2.length;
    while (++i2 < n2) object2 = coordinates2[i2], stream.point(object2[0], object2[1], object2[2]);
  },
  LineString: function(object2, stream) {
    streamLine(object2.coordinates, stream, 0);
  },
  MultiLineString: function(object2, stream) {
    var coordinates2 = object2.coordinates, i2 = -1, n2 = coordinates2.length;
    while (++i2 < n2) streamLine(coordinates2[i2], stream, 0);
  },
  Polygon: function(object2, stream) {
    streamPolygon(object2.coordinates, stream);
  },
  MultiPolygon: function(object2, stream) {
    var coordinates2 = object2.coordinates, i2 = -1, n2 = coordinates2.length;
    while (++i2 < n2) streamPolygon(coordinates2[i2], stream);
  },
  GeometryCollection: function(object2, stream) {
    var geometries = object2.geometries, i2 = -1, n2 = geometries.length;
    while (++i2 < n2) streamGeometry(geometries[i2], stream);
  }
};
function streamLine(coordinates2, stream, closed) {
  var i2 = -1, n2 = coordinates2.length - closed, coordinate;
  stream.lineStart();
  while (++i2 < n2) coordinate = coordinates2[i2], stream.point(coordinate[0], coordinate[1], coordinate[2]);
  stream.lineEnd();
}
function streamPolygon(coordinates2, stream) {
  var i2 = -1, n2 = coordinates2.length;
  stream.polygonStart();
  while (++i2 < n2) streamLine(coordinates2[i2], stream, 1);
  stream.polygonEnd();
}
function stream_default(object2, stream) {
  if (object2 && streamObjectType.hasOwnProperty(object2.type)) {
    streamObjectType[object2.type](object2, stream);
  } else {
    streamGeometry(object2, stream);
  }
}

// node_modules/d3-geo/src/area.js
var areaRingSum = adder_default();
var areaSum = adder_default();

// node_modules/d3-geo/src/cartesian.js
function spherical(cartesian2) {
  return [atan2(cartesian2[1], cartesian2[0]), asin(cartesian2[2])];
}
function cartesian(spherical2) {
  var lambda = spherical2[0], phi = spherical2[1], cosPhi = cos(phi);
  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];
}
function cartesianDot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}
function cartesianCross(a, b) {
  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
}
function cartesianAddInPlace(a, b) {
  a[0] += b[0], a[1] += b[1], a[2] += b[2];
}
function cartesianScale(vector, k) {
  return [vector[0] * k, vector[1] * k, vector[2] * k];
}
function cartesianNormalizeInPlace(d) {
  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
  d[0] /= l, d[1] /= l, d[2] /= l;
}

// node_modules/d3-geo/src/bounds.js
var deltaSum = adder_default();

// node_modules/d3-geo/src/compose.js
function compose_default(a, b) {
  function compose(x, y) {
    return x = a(x, y), b(x[0], x[1]);
  }
  if (a.invert && b.invert) compose.invert = function(x, y) {
    return x = b.invert(x, y), x && a.invert(x[0], x[1]);
  };
  return compose;
}

// node_modules/d3-geo/src/rotation.js
function rotationIdentity(lambda, phi) {
  return [abs(lambda) > pi ? lambda + Math.round(-lambda / tau) * tau : lambda, phi];
}
rotationIdentity.invert = rotationIdentity;
function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
  return (deltaLambda %= tau) ? deltaPhi || deltaGamma ? compose_default(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;
}
function forwardRotationLambda(deltaLambda) {
  return function(lambda, phi) {
    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];
  };
}
function rotationLambda(deltaLambda) {
  var rotation = forwardRotationLambda(deltaLambda);
  rotation.invert = forwardRotationLambda(-deltaLambda);
  return rotation;
}
function rotationPhiGamma(deltaPhi, deltaGamma) {
  var cosDeltaPhi = cos(deltaPhi), sinDeltaPhi = sin(deltaPhi), cosDeltaGamma = cos(deltaGamma), sinDeltaGamma = sin(deltaGamma);
  function rotation(lambda, phi) {
    var cosPhi = cos(phi), x = cos(lambda) * cosPhi, y = sin(lambda) * cosPhi, z4 = sin(phi), k = z4 * cosDeltaPhi + x * sinDeltaPhi;
    return [
      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z4 * sinDeltaPhi),
      asin(k * cosDeltaGamma + y * sinDeltaGamma)
    ];
  }
  rotation.invert = function(lambda, phi) {
    var cosPhi = cos(phi), x = cos(lambda) * cosPhi, y = sin(lambda) * cosPhi, z4 = sin(phi), k = z4 * cosDeltaGamma - y * sinDeltaGamma;
    return [
      atan2(y * cosDeltaGamma + z4 * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
      asin(k * cosDeltaPhi - x * sinDeltaPhi)
    ];
  };
  return rotation;
}
function rotation_default(rotate) {
  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);
  function forward(coordinates2) {
    coordinates2 = rotate(coordinates2[0] * radians, coordinates2[1] * radians);
    return coordinates2[0] *= degrees, coordinates2[1] *= degrees, coordinates2;
  }
  forward.invert = function(coordinates2) {
    coordinates2 = rotate.invert(coordinates2[0] * radians, coordinates2[1] * radians);
    return coordinates2[0] *= degrees, coordinates2[1] *= degrees, coordinates2;
  };
  return forward;
}

// node_modules/d3-geo/src/circle.js
function circleStream(stream, radius, delta, direction, t0, t1) {
  if (!delta) return;
  var cosRadius = cos(radius), sinRadius = sin(radius), step = direction * delta;
  if (t0 == null) {
    t0 = radius + direction * tau;
    t1 = radius - step / 2;
  } else {
    t0 = circleRadius(cosRadius, t0);
    t1 = circleRadius(cosRadius, t1);
    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;
  }
  for (var point, t2 = t0; direction > 0 ? t2 > t1 : t2 < t1; t2 -= step) {
    point = spherical([cosRadius, -sinRadius * cos(t2), -sinRadius * sin(t2)]);
    stream.point(point[0], point[1]);
  }
}
function circleRadius(cosRadius, point) {
  point = cartesian(point), point[0] -= cosRadius;
  cartesianNormalizeInPlace(point);
  var radius = acos(-point[1]);
  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;
}

// node_modules/d3-geo/src/clip/buffer.js
function buffer_default() {
  var lines = [], line;
  return {
    point: function(x, y, m2) {
      line.push([x, y, m2]);
    },
    lineStart: function() {
      lines.push(line = []);
    },
    lineEnd: noop,
    rejoin: function() {
      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
    },
    result: function() {
      var result = lines;
      lines = [];
      line = null;
      return result;
    }
  };
}

// node_modules/d3-geo/src/pointEqual.js
function pointEqual_default(a, b) {
  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;
}

// node_modules/d3-geo/src/clip/rejoin.js
function Intersection(point, points, other, entry) {
  this.x = point;
  this.z = points;
  this.o = other;
  this.e = entry;
  this.v = false;
  this.n = this.p = null;
}
function rejoin_default(segments, compareIntersection2, startInside, interpolate, stream) {
  var subject = [], clip = [], i2, n2;
  segments.forEach(function(segment) {
    if ((n3 = segment.length - 1) <= 0) return;
    var n3, p0 = segment[0], p1 = segment[n3], x;
    if (pointEqual_default(p0, p1)) {
      if (!p0[2] && !p1[2]) {
        stream.lineStart();
        for (i2 = 0; i2 < n3; ++i2) stream.point((p0 = segment[i2])[0], p0[1]);
        stream.lineEnd();
        return;
      }
      p1[0] += 2 * epsilon;
    }
    subject.push(x = new Intersection(p0, segment, null, true));
    clip.push(x.o = new Intersection(p0, null, x, false));
    subject.push(x = new Intersection(p1, segment, null, false));
    clip.push(x.o = new Intersection(p1, null, x, true));
  });
  if (!subject.length) return;
  clip.sort(compareIntersection2);
  link(subject);
  link(clip);
  for (i2 = 0, n2 = clip.length; i2 < n2; ++i2) {
    clip[i2].e = startInside = !startInside;
  }
  var start = subject[0], points, point;
  while (1) {
    var current = start, isSubject = true;
    while (current.v) if ((current = current.n) === start) return;
    points = current.z;
    stream.lineStart();
    do {
      current.v = current.o.v = true;
      if (current.e) {
        if (isSubject) {
          for (i2 = 0, n2 = points.length; i2 < n2; ++i2) stream.point((point = points[i2])[0], point[1]);
        } else {
          interpolate(current.x, current.n.x, 1, stream);
        }
        current = current.n;
      } else {
        if (isSubject) {
          points = current.p.z;
          for (i2 = points.length - 1; i2 >= 0; --i2) stream.point((point = points[i2])[0], point[1]);
        } else {
          interpolate(current.x, current.p.x, -1, stream);
        }
        current = current.p;
      }
      current = current.o;
      points = current.z;
      isSubject = !isSubject;
    } while (!current.v);
    stream.lineEnd();
  }
}
function link(array2) {
  if (!(n2 = array2.length)) return;
  var n2, i2 = 0, a = array2[0], b;
  while (++i2 < n2) {
    a.n = b = array2[i2];
    b.p = a;
    a = b;
  }
  a.n = b = array2[0];
  b.p = a;
}

// node_modules/d3-geo/src/polygonContains.js
var sum = adder_default();
function longitude(point) {
  if (abs(point[0]) <= pi)
    return point[0];
  else
    return sign(point[0]) * ((abs(point[0]) + pi) % tau - pi);
}
function polygonContains_default(polygon, point) {
  var lambda = longitude(point), phi = point[1], sinPhi = sin(phi), normal = [sin(lambda), -cos(lambda), 0], angle = 0, winding = 0;
  sum.reset();
  if (sinPhi === 1) phi = halfPi + epsilon;
  else if (sinPhi === -1) phi = -halfPi - epsilon;
  for (var i2 = 0, n2 = polygon.length; i2 < n2; ++i2) {
    if (!(m2 = (ring = polygon[i2]).length)) continue;
    var ring, m2, point0 = ring[m2 - 1], lambda02 = longitude(point0), phi0 = point0[1] / 2 + quarterPi, sinPhi02 = sin(phi0), cosPhi02 = cos(phi0);
    for (var j = 0; j < m2; ++j, lambda02 = lambda1, sinPhi02 = sinPhi1, cosPhi02 = cosPhi1, point0 = point1) {
      var point1 = ring[j], lambda1 = longitude(point1), phi1 = point1[1] / 2 + quarterPi, sinPhi1 = sin(phi1), cosPhi1 = cos(phi1), delta = lambda1 - lambda02, sign2 = delta >= 0 ? 1 : -1, absDelta = sign2 * delta, antimeridian = absDelta > pi, k = sinPhi02 * sinPhi1;
      sum.add(atan2(k * sign2 * sin(absDelta), cosPhi02 * cosPhi1 + k * cos(absDelta)));
      angle += antimeridian ? delta + sign2 * tau : delta;
      if (antimeridian ^ lambda02 >= lambda ^ lambda1 >= lambda) {
        var arc = cartesianCross(cartesian(point0), cartesian(point1));
        cartesianNormalizeInPlace(arc);
        var intersection = cartesianCross(normal, arc);
        cartesianNormalizeInPlace(intersection);
        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);
        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
          winding += antimeridian ^ delta >= 0 ? 1 : -1;
        }
      }
    }
  }
  return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ winding & 1;
}

// node_modules/d3-array/src/ascending.js
function ascending_default(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

// node_modules/d3-array/src/bisector.js
function bisector_default(compare) {
  if (compare.length === 1) compare = ascendingComparator(compare);
  return {
    left: function(a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) < 0) lo = mid + 1;
        else hi = mid;
      }
      return lo;
    },
    right: function(a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) > 0) hi = mid;
        else lo = mid + 1;
      }
      return lo;
    }
  };
}
function ascendingComparator(f) {
  return function(d, x) {
    return ascending_default(f(d), x);
  };
}

// node_modules/d3-array/src/bisect.js
var ascendingBisect = bisector_default(ascending_default);
var bisectRight = ascendingBisect.right;
var bisectLeft = ascendingBisect.left;

// node_modules/d3-array/src/array.js
var array = Array.prototype;
var slice = array.slice;
var map = array.map;

// node_modules/d3-array/src/range.js
function range_default(start, stop, step) {
  start = +start, stop = +stop, step = (n2 = arguments.length) < 2 ? (stop = start, start = 0, 1) : n2 < 3 ? 1 : +step;
  var i2 = -1, n2 = Math.max(0, Math.ceil((stop - start) / step)) | 0, range = new Array(n2);
  while (++i2 < n2) {
    range[i2] = start + i2 * step;
  }
  return range;
}

// node_modules/d3-array/src/ticks.js
var e10 = Math.sqrt(50);
var e5 = Math.sqrt(10);
var e2 = Math.sqrt(2);

// node_modules/d3-array/src/merge.js
function merge_default(arrays) {
  var n2 = arrays.length, m2, i2 = -1, j = 0, merged, array2;
  while (++i2 < n2) j += arrays[i2].length;
  merged = new Array(j);
  while (--n2 >= 0) {
    array2 = arrays[n2];
    m2 = array2.length;
    while (--m2 >= 0) {
      merged[--j] = array2[m2];
    }
  }
  return merged;
}

// node_modules/d3-geo/src/clip/index.js
function clip_default(pointVisible, clipLine, interpolate, start) {
  return function(sink) {
    var line = clipLine(sink), ringBuffer = buffer_default(), ringSink = clipLine(ringBuffer), polygonStarted = false, polygon, segments, ring;
    var clip = {
      point,
      lineStart,
      lineEnd,
      polygonStart: function() {
        clip.point = pointRing;
        clip.lineStart = ringStart;
        clip.lineEnd = ringEnd;
        segments = [];
        polygon = [];
      },
      polygonEnd: function() {
        clip.point = point;
        clip.lineStart = lineStart;
        clip.lineEnd = lineEnd;
        segments = merge_default(segments);
        var startInside = polygonContains_default(polygon, start);
        if (segments.length) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          rejoin_default(segments, compareIntersection, startInside, interpolate, sink);
        } else if (startInside) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          interpolate(null, null, 1, sink);
          sink.lineEnd();
        }
        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
        segments = polygon = null;
      },
      sphere: function() {
        sink.polygonStart();
        sink.lineStart();
        interpolate(null, null, 1, sink);
        sink.lineEnd();
        sink.polygonEnd();
      }
    };
    function point(lambda, phi) {
      if (pointVisible(lambda, phi)) sink.point(lambda, phi);
    }
    function pointLine(lambda, phi) {
      line.point(lambda, phi);
    }
    function lineStart() {
      clip.point = pointLine;
      line.lineStart();
    }
    function lineEnd() {
      clip.point = point;
      line.lineEnd();
    }
    function pointRing(lambda, phi) {
      ring.push([lambda, phi]);
      ringSink.point(lambda, phi);
    }
    function ringStart() {
      ringSink.lineStart();
      ring = [];
    }
    function ringEnd() {
      pointRing(ring[0][0], ring[0][1]);
      ringSink.lineEnd();
      var clean = ringSink.clean(), ringSegments = ringBuffer.result(), i2, n2 = ringSegments.length, m2, segment, point2;
      ring.pop();
      polygon.push(ring);
      ring = null;
      if (!n2) return;
      if (clean & 1) {
        segment = ringSegments[0];
        if ((m2 = segment.length - 1) > 0) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          for (i2 = 0; i2 < m2; ++i2) sink.point((point2 = segment[i2])[0], point2[1]);
          sink.lineEnd();
        }
        return;
      }
      if (n2 > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
      segments.push(ringSegments.filter(validSegment));
    }
    return clip;
  };
}
function validSegment(segment) {
  return segment.length > 1;
}
function compareIntersection(a, b) {
  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);
}

// node_modules/d3-geo/src/clip/antimeridian.js
var antimeridian_default = clip_default(
  function() {
    return true;
  },
  clipAntimeridianLine,
  clipAntimeridianInterpolate,
  [-pi, -halfPi]
);
function clipAntimeridianLine(stream) {
  var lambda02 = NaN, phi0 = NaN, sign0 = NaN, clean;
  return {
    lineStart: function() {
      stream.lineStart();
      clean = 1;
    },
    point: function(lambda1, phi1) {
      var sign1 = lambda1 > 0 ? pi : -pi, delta = abs(lambda1 - lambda02);
      if (abs(delta - pi) < epsilon) {
        stream.point(lambda02, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        stream.point(lambda1, phi0);
        clean = 0;
      } else if (sign0 !== sign1 && delta >= pi) {
        if (abs(lambda02 - sign0) < epsilon) lambda02 -= sign0 * epsilon;
        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;
        phi0 = clipAntimeridianIntersect(lambda02, phi0, lambda1, phi1);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        clean = 0;
      }
      stream.point(lambda02 = lambda1, phi0 = phi1);
      sign0 = sign1;
    },
    lineEnd: function() {
      stream.lineEnd();
      lambda02 = phi0 = NaN;
    },
    clean: function() {
      return 2 - clean;
    }
  };
}
function clipAntimeridianIntersect(lambda02, phi0, lambda1, phi1) {
  var cosPhi02, cosPhi1, sinLambda0Lambda1 = sin(lambda02 - lambda1);
  return abs(sinLambda0Lambda1) > epsilon ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1) - sin(phi1) * (cosPhi02 = cos(phi0)) * sin(lambda02)) / (cosPhi02 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;
}
function clipAntimeridianInterpolate(from, to2, direction, stream) {
  var phi;
  if (from == null) {
    phi = direction * halfPi;
    stream.point(-pi, phi);
    stream.point(0, phi);
    stream.point(pi, phi);
    stream.point(pi, 0);
    stream.point(pi, -phi);
    stream.point(0, -phi);
    stream.point(-pi, -phi);
    stream.point(-pi, 0);
    stream.point(-pi, phi);
  } else if (abs(from[0] - to2[0]) > epsilon) {
    var lambda = from[0] < to2[0] ? pi : -pi;
    phi = direction * lambda / 2;
    stream.point(-lambda, phi);
    stream.point(0, phi);
    stream.point(lambda, phi);
  } else {
    stream.point(to2[0], to2[1]);
  }
}

// node_modules/d3-geo/src/clip/circle.js
function circle_default(radius) {
  var cr = cos(radius), delta = 6 * radians, smallRadius = cr > 0, notHemisphere = abs(cr) > epsilon;
  function interpolate(from, to2, direction, stream) {
    circleStream(stream, radius, delta, direction, from, to2);
  }
  function visible(lambda, phi) {
    return cos(lambda) * cos(phi) > cr;
  }
  function clipLine(stream) {
    var point0, c0, v0, v00, clean;
    return {
      lineStart: function() {
        v00 = v0 = false;
        clean = 1;
      },
      point: function(lambda, phi) {
        var point1 = [lambda, phi], point2, v = visible(lambda, phi), c = smallRadius ? v ? 0 : code(lambda, phi) : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;
        if (!point0 && (v00 = v0 = v)) stream.lineStart();
        if (v !== v0) {
          point2 = intersect(point0, point1);
          if (!point2 || pointEqual_default(point0, point2) || pointEqual_default(point1, point2))
            point1[2] = 1;
        }
        if (v !== v0) {
          clean = 0;
          if (v) {
            stream.lineStart();
            point2 = intersect(point1, point0);
            stream.point(point2[0], point2[1]);
          } else {
            point2 = intersect(point0, point1);
            stream.point(point2[0], point2[1], 2);
            stream.lineEnd();
          }
          point0 = point2;
        } else if (notHemisphere && point0 && smallRadius ^ v) {
          var t2;
          if (!(c & c0) && (t2 = intersect(point1, point0, true))) {
            clean = 0;
            if (smallRadius) {
              stream.lineStart();
              stream.point(t2[0][0], t2[0][1]);
              stream.point(t2[1][0], t2[1][1]);
              stream.lineEnd();
            } else {
              stream.point(t2[1][0], t2[1][1]);
              stream.lineEnd();
              stream.lineStart();
              stream.point(t2[0][0], t2[0][1], 3);
            }
          }
        }
        if (v && (!point0 || !pointEqual_default(point0, point1))) {
          stream.point(point1[0], point1[1]);
        }
        point0 = point1, v0 = v, c0 = c;
      },
      lineEnd: function() {
        if (v0) stream.lineEnd();
        point0 = null;
      },
      // Rejoin first and last segments if there were intersections and the first
      // and last points were visible.
      clean: function() {
        return clean | (v00 && v0) << 1;
      }
    };
  }
  function intersect(a, b, two) {
    var pa = cartesian(a), pb = cartesian(b);
    var n1 = [1, 0, 0], n2 = cartesianCross(pa, pb), n2n2 = cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
    if (!determinant) return !two && a;
    var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = cartesianCross(n1, n2), A5 = cartesianScale(n1, c1), B = cartesianScale(n2, c2);
    cartesianAddInPlace(A5, B);
    var u = n1xn2, w = cartesianDot(A5, u), uu = cartesianDot(u, u), t2 = w * w - uu * (cartesianDot(A5, A5) - 1);
    if (t2 < 0) return;
    var t3 = sqrt(t2), q2 = cartesianScale(u, (-w - t3) / uu);
    cartesianAddInPlace(q2, A5);
    q2 = spherical(q2);
    if (!two) return q2;
    var lambda02 = a[0], lambda1 = b[0], phi0 = a[1], phi1 = b[1], z4;
    if (lambda1 < lambda02) z4 = lambda02, lambda02 = lambda1, lambda1 = z4;
    var delta2 = lambda1 - lambda02, polar = abs(delta2 - pi) < epsilon, meridian = polar || delta2 < epsilon;
    if (!polar && phi1 < phi0) z4 = phi0, phi0 = phi1, phi1 = z4;
    if (meridian ? polar ? phi0 + phi1 > 0 ^ q2[1] < (abs(q2[0] - lambda02) < epsilon ? phi0 : phi1) : phi0 <= q2[1] && q2[1] <= phi1 : delta2 > pi ^ (lambda02 <= q2[0] && q2[0] <= lambda1)) {
      var q1 = cartesianScale(u, (-w + t3) / uu);
      cartesianAddInPlace(q1, A5);
      return [q2, spherical(q1)];
    }
  }
  function code(lambda, phi) {
    var r2 = smallRadius ? radius : pi - radius, code2 = 0;
    if (lambda < -r2) code2 |= 1;
    else if (lambda > r2) code2 |= 2;
    if (phi < -r2) code2 |= 4;
    else if (phi > r2) code2 |= 8;
    return code2;
  }
  return clip_default(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);
}

// node_modules/d3-geo/src/clip/line.js
function line_default(a, b, x05, y05, x12, y12) {
  var ax = a[0], ay = a[1], bx = b[0], by = b[1], t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r2;
  r2 = x05 - ax;
  if (!dx && r2 > 0) return;
  r2 /= dx;
  if (dx < 0) {
    if (r2 < t0) return;
    if (r2 < t1) t1 = r2;
  } else if (dx > 0) {
    if (r2 > t1) return;
    if (r2 > t0) t0 = r2;
  }
  r2 = x12 - ax;
  if (!dx && r2 < 0) return;
  r2 /= dx;
  if (dx < 0) {
    if (r2 > t1) return;
    if (r2 > t0) t0 = r2;
  } else if (dx > 0) {
    if (r2 < t0) return;
    if (r2 < t1) t1 = r2;
  }
  r2 = y05 - ay;
  if (!dy && r2 > 0) return;
  r2 /= dy;
  if (dy < 0) {
    if (r2 < t0) return;
    if (r2 < t1) t1 = r2;
  } else if (dy > 0) {
    if (r2 > t1) return;
    if (r2 > t0) t0 = r2;
  }
  r2 = y12 - ay;
  if (!dy && r2 < 0) return;
  r2 /= dy;
  if (dy < 0) {
    if (r2 > t1) return;
    if (r2 > t0) t0 = r2;
  } else if (dy > 0) {
    if (r2 < t0) return;
    if (r2 < t1) t1 = r2;
  }
  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
  return true;
}

// node_modules/d3-geo/src/clip/rectangle.js
var clipMax = 1e9;
var clipMin = -clipMax;
function clipRectangle(x05, y05, x12, y12) {
  function visible(x, y) {
    return x05 <= x && x <= x12 && y05 <= y && y <= y12;
  }
  function interpolate(from, to2, direction, stream) {
    var a = 0, a1 = 0;
    if (from == null || (a = corner(from, direction)) !== (a1 = corner(to2, direction)) || comparePoint(from, to2) < 0 ^ direction > 0) {
      do
        stream.point(a === 0 || a === 3 ? x05 : x12, a > 1 ? y12 : y05);
      while ((a = (a + direction + 4) % 4) !== a1);
    } else {
      stream.point(to2[0], to2[1]);
    }
  }
  function corner(p2, direction) {
    return abs(p2[0] - x05) < epsilon ? direction > 0 ? 0 : 3 : abs(p2[0] - x12) < epsilon ? direction > 0 ? 2 : 1 : abs(p2[1] - y05) < epsilon ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
  }
  function compareIntersection2(a, b) {
    return comparePoint(a.x, b.x);
  }
  function comparePoint(a, b) {
    var ca = corner(a, 1), cb = corner(b, 1);
    return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
  }
  return function(stream) {
    var activeStream = stream, bufferStream = buffer_default(), segments, polygon, ring, x__, y__, v__, x_, y_, v_, first, clean;
    var clipStream = {
      point,
      lineStart,
      lineEnd,
      polygonStart,
      polygonEnd
    };
    function point(x, y) {
      if (visible(x, y)) activeStream.point(x, y);
    }
    function polygonInside() {
      var winding = 0;
      for (var i2 = 0, n2 = polygon.length; i2 < n2; ++i2) {
        for (var ring2 = polygon[i2], j = 1, m2 = ring2.length, point2 = ring2[0], a0, a1, b0 = point2[0], b1 = point2[1]; j < m2; ++j) {
          a0 = b0, a1 = b1, point2 = ring2[j], b0 = point2[0], b1 = point2[1];
          if (a1 <= y12) {
            if (b1 > y12 && (b0 - a0) * (y12 - a1) > (b1 - a1) * (x05 - a0)) ++winding;
          } else {
            if (b1 <= y12 && (b0 - a0) * (y12 - a1) < (b1 - a1) * (x05 - a0)) --winding;
          }
        }
      }
      return winding;
    }
    function polygonStart() {
      activeStream = bufferStream, segments = [], polygon = [], clean = true;
    }
    function polygonEnd() {
      var startInside = polygonInside(), cleanInside = clean && startInside, visible2 = (segments = merge_default(segments)).length;
      if (cleanInside || visible2) {
        stream.polygonStart();
        if (cleanInside) {
          stream.lineStart();
          interpolate(null, null, 1, stream);
          stream.lineEnd();
        }
        if (visible2) {
          rejoin_default(segments, compareIntersection2, startInside, interpolate, stream);
        }
        stream.polygonEnd();
      }
      activeStream = stream, segments = polygon = ring = null;
    }
    function lineStart() {
      clipStream.point = linePoint;
      if (polygon) polygon.push(ring = []);
      first = true;
      v_ = false;
      x_ = y_ = NaN;
    }
    function lineEnd() {
      if (segments) {
        linePoint(x__, y__);
        if (v__ && v_) bufferStream.rejoin();
        segments.push(bufferStream.result());
      }
      clipStream.point = point;
      if (v_) activeStream.lineEnd();
    }
    function linePoint(x, y) {
      var v = visible(x, y);
      if (polygon) ring.push([x, y]);
      if (first) {
        x__ = x, y__ = y, v__ = v;
        first = false;
        if (v) {
          activeStream.lineStart();
          activeStream.point(x, y);
        }
      } else {
        if (v && v_) activeStream.point(x, y);
        else {
          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))], b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];
          if (line_default(a, b, x05, y05, x12, y12)) {
            if (!v_) {
              activeStream.lineStart();
              activeStream.point(a[0], a[1]);
            }
            activeStream.point(b[0], b[1]);
            if (!v) activeStream.lineEnd();
            clean = false;
          } else if (v) {
            activeStream.lineStart();
            activeStream.point(x, y);
            clean = false;
          }
        }
      }
      x_ = x, y_ = y, v_ = v;
    }
    return clipStream;
  };
}

// node_modules/d3-geo/src/length.js
var lengthSum = adder_default();
var lambda0;
var sinPhi0;
var cosPhi0;
var lengthStream = {
  sphere: noop,
  point: noop,
  lineStart: lengthLineStart,
  lineEnd: noop,
  polygonStart: noop,
  polygonEnd: noop
};
function lengthLineStart() {
  lengthStream.point = lengthPointFirst;
  lengthStream.lineEnd = lengthLineEnd;
}
function lengthLineEnd() {
  lengthStream.point = lengthStream.lineEnd = noop;
}
function lengthPointFirst(lambda, phi) {
  lambda *= radians, phi *= radians;
  lambda0 = lambda, sinPhi0 = sin(phi), cosPhi0 = cos(phi);
  lengthStream.point = lengthPoint;
}
function lengthPoint(lambda, phi) {
  lambda *= radians, phi *= radians;
  var sinPhi = sin(phi), cosPhi = cos(phi), delta = abs(lambda - lambda0), cosDelta = cos(delta), sinDelta = sin(delta), x = cosPhi * sinDelta, y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta, z4 = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;
  lengthSum.add(atan2(sqrt(x * x + y * y), z4));
  lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;
}
function length_default(object2) {
  lengthSum.reset();
  stream_default(object2, lengthStream);
  return +lengthSum;
}

// node_modules/d3-geo/src/distance.js
var coordinates = [null, null];
var object = { type: "LineString", coordinates };
function distance_default(a, b) {
  coordinates[0] = a;
  coordinates[1] = b;
  return length_default(object);
}

// node_modules/d3-geo/src/contains.js
var containsObjectType = {
  Feature: function(object2, point) {
    return containsGeometry(object2.geometry, point);
  },
  FeatureCollection: function(object2, point) {
    var features = object2.features, i2 = -1, n2 = features.length;
    while (++i2 < n2) if (containsGeometry(features[i2].geometry, point)) return true;
    return false;
  }
};
var containsGeometryType = {
  Sphere: function() {
    return true;
  },
  Point: function(object2, point) {
    return containsPoint(object2.coordinates, point);
  },
  MultiPoint: function(object2, point) {
    var coordinates2 = object2.coordinates, i2 = -1, n2 = coordinates2.length;
    while (++i2 < n2) if (containsPoint(coordinates2[i2], point)) return true;
    return false;
  },
  LineString: function(object2, point) {
    return containsLine(object2.coordinates, point);
  },
  MultiLineString: function(object2, point) {
    var coordinates2 = object2.coordinates, i2 = -1, n2 = coordinates2.length;
    while (++i2 < n2) if (containsLine(coordinates2[i2], point)) return true;
    return false;
  },
  Polygon: function(object2, point) {
    return containsPolygon(object2.coordinates, point);
  },
  MultiPolygon: function(object2, point) {
    var coordinates2 = object2.coordinates, i2 = -1, n2 = coordinates2.length;
    while (++i2 < n2) if (containsPolygon(coordinates2[i2], point)) return true;
    return false;
  },
  GeometryCollection: function(object2, point) {
    var geometries = object2.geometries, i2 = -1, n2 = geometries.length;
    while (++i2 < n2) if (containsGeometry(geometries[i2], point)) return true;
    return false;
  }
};
function containsGeometry(geometry, point) {
  return geometry && containsGeometryType.hasOwnProperty(geometry.type) ? containsGeometryType[geometry.type](geometry, point) : false;
}
function containsPoint(coordinates2, point) {
  return distance_default(coordinates2, point) === 0;
}
function containsLine(coordinates2, point) {
  var ao, bo, ab;
  for (var i2 = 0, n2 = coordinates2.length; i2 < n2; i2++) {
    bo = distance_default(coordinates2[i2], point);
    if (bo === 0) return true;
    if (i2 > 0) {
      ab = distance_default(coordinates2[i2], coordinates2[i2 - 1]);
      if (ab > 0 && ao <= ab && bo <= ab && (ao + bo - ab) * (1 - Math.pow((ao - bo) / ab, 2)) < epsilon2 * ab)
        return true;
    }
    ao = bo;
  }
  return false;
}
function containsPolygon(coordinates2, point) {
  return !!polygonContains_default(coordinates2.map(ringRadians), pointRadians(point));
}
function ringRadians(ring) {
  return ring = ring.map(pointRadians), ring.pop(), ring;
}
function pointRadians(point) {
  return [point[0] * radians, point[1] * radians];
}
function contains_default(object2, point) {
  return (object2 && containsObjectType.hasOwnProperty(object2.type) ? containsObjectType[object2.type] : containsGeometry)(object2, point);
}

// node_modules/d3-geo/src/graticule.js
function graticuleX(y05, y12, dy) {
  var y = range_default(y05, y12 - epsilon, dy).concat(y12);
  return function(x) {
    return y.map(function(y2) {
      return [x, y2];
    });
  };
}
function graticuleY(x05, x12, dx) {
  var x = range_default(x05, x12 - epsilon, dx).concat(x12);
  return function(y) {
    return x.map(function(x2) {
      return [x2, y];
    });
  };
}
function graticule() {
  var x12, x05, X12, X02, y12, y05, Y12, Y02, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X3, Y3, precision = 2.5;
  function graticule2() {
    return { type: "MultiLineString", coordinates: lines() };
  }
  function lines() {
    return range_default(ceil(X02 / DX) * DX, X12, DX).map(X3).concat(range_default(ceil(Y02 / DY) * DY, Y12, DY).map(Y3)).concat(range_default(ceil(x05 / dx) * dx, x12, dx).filter(function(x2) {
      return abs(x2 % DX) > epsilon;
    }).map(x)).concat(range_default(ceil(y05 / dy) * dy, y12, dy).filter(function(y2) {
      return abs(y2 % DY) > epsilon;
    }).map(y));
  }
  graticule2.lines = function() {
    return lines().map(function(coordinates2) {
      return { type: "LineString", coordinates: coordinates2 };
    });
  };
  graticule2.outline = function() {
    return {
      type: "Polygon",
      coordinates: [
        X3(X02).concat(
          Y3(Y12).slice(1),
          X3(X12).reverse().slice(1),
          Y3(Y02).reverse().slice(1)
        )
      ]
    };
  };
  graticule2.extent = function(_2) {
    if (!arguments.length) return graticule2.extentMinor();
    return graticule2.extentMajor(_2).extentMinor(_2);
  };
  graticule2.extentMajor = function(_2) {
    if (!arguments.length) return [[X02, Y02], [X12, Y12]];
    X02 = +_2[0][0], X12 = +_2[1][0];
    Y02 = +_2[0][1], Y12 = +_2[1][1];
    if (X02 > X12) _2 = X02, X02 = X12, X12 = _2;
    if (Y02 > Y12) _2 = Y02, Y02 = Y12, Y12 = _2;
    return graticule2.precision(precision);
  };
  graticule2.extentMinor = function(_2) {
    if (!arguments.length) return [[x05, y05], [x12, y12]];
    x05 = +_2[0][0], x12 = +_2[1][0];
    y05 = +_2[0][1], y12 = +_2[1][1];
    if (x05 > x12) _2 = x05, x05 = x12, x12 = _2;
    if (y05 > y12) _2 = y05, y05 = y12, y12 = _2;
    return graticule2.precision(precision);
  };
  graticule2.step = function(_2) {
    if (!arguments.length) return graticule2.stepMinor();
    return graticule2.stepMajor(_2).stepMinor(_2);
  };
  graticule2.stepMajor = function(_2) {
    if (!arguments.length) return [DX, DY];
    DX = +_2[0], DY = +_2[1];
    return graticule2;
  };
  graticule2.stepMinor = function(_2) {
    if (!arguments.length) return [dx, dy];
    dx = +_2[0], dy = +_2[1];
    return graticule2;
  };
  graticule2.precision = function(_2) {
    if (!arguments.length) return precision;
    precision = +_2;
    x = graticuleX(y05, y12, 90);
    y = graticuleY(x05, x12, precision);
    X3 = graticuleX(Y02, Y12, 90);
    Y3 = graticuleY(X02, X12, precision);
    return graticule2;
  };
  return graticule2.extentMajor([[-180, -90 + epsilon], [180, 90 - epsilon]]).extentMinor([[-180, -80 - epsilon], [180, 80 + epsilon]]);
}

// node_modules/d3-geo/src/identity.js
function identity_default2(x) {
  return x;
}

// node_modules/d3-geo/src/path/area.js
var areaSum2 = adder_default();
var areaRingSum2 = adder_default();
var x00;
var y00;
var x0;
var y0;
var areaStream2 = {
  point: noop,
  lineStart: noop,
  lineEnd: noop,
  polygonStart: function() {
    areaStream2.lineStart = areaRingStart;
    areaStream2.lineEnd = areaRingEnd;
  },
  polygonEnd: function() {
    areaStream2.lineStart = areaStream2.lineEnd = areaStream2.point = noop;
    areaSum2.add(abs(areaRingSum2));
    areaRingSum2.reset();
  },
  result: function() {
    var area = areaSum2 / 2;
    areaSum2.reset();
    return area;
  }
};
function areaRingStart() {
  areaStream2.point = areaPointFirst;
}
function areaPointFirst(x, y) {
  areaStream2.point = areaPoint;
  x00 = x0 = x, y00 = y0 = y;
}
function areaPoint(x, y) {
  areaRingSum2.add(y0 * x - x0 * y);
  x0 = x, y0 = y;
}
function areaRingEnd() {
  areaPoint(x00, y00);
}
var area_default = areaStream2;

// node_modules/d3-geo/src/path/bounds.js
var x02 = Infinity;
var y02 = x02;
var x1 = -x02;
var y1 = x1;
var boundsStream = {
  point: boundsPoint,
  lineStart: noop,
  lineEnd: noop,
  polygonStart: noop,
  polygonEnd: noop,
  result: function() {
    var bounds = [[x02, y02], [x1, y1]];
    x1 = y1 = -(y02 = x02 = Infinity);
    return bounds;
  }
};
function boundsPoint(x, y) {
  if (x < x02) x02 = x;
  if (x > x1) x1 = x;
  if (y < y02) y02 = y;
  if (y > y1) y1 = y;
}
var bounds_default = boundsStream;

// node_modules/d3-geo/src/path/centroid.js
var X0 = 0;
var Y0 = 0;
var Z0 = 0;
var X1 = 0;
var Y1 = 0;
var Z1 = 0;
var X2 = 0;
var Y2 = 0;
var Z2 = 0;
var x002;
var y002;
var x03;
var y03;
var centroidStream = {
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function() {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function() {
    centroidStream.point = centroidPoint;
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  },
  result: function() {
    var centroid = Z2 ? [X2 / Z2, Y2 / Z2] : Z1 ? [X1 / Z1, Y1 / Z1] : Z0 ? [X0 / Z0, Y0 / Z0] : [NaN, NaN];
    X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
    return centroid;
  }
};
function centroidPoint(x, y) {
  X0 += x;
  Y0 += y;
  ++Z0;
}
function centroidLineStart() {
  centroidStream.point = centroidPointFirstLine;
}
function centroidPointFirstLine(x, y) {
  centroidStream.point = centroidPointLine;
  centroidPoint(x03 = x, y03 = y);
}
function centroidPointLine(x, y) {
  var dx = x - x03, dy = y - y03, z4 = sqrt(dx * dx + dy * dy);
  X1 += z4 * (x03 + x) / 2;
  Y1 += z4 * (y03 + y) / 2;
  Z1 += z4;
  centroidPoint(x03 = x, y03 = y);
}
function centroidLineEnd() {
  centroidStream.point = centroidPoint;
}
function centroidRingStart() {
  centroidStream.point = centroidPointFirstRing;
}
function centroidRingEnd() {
  centroidPointRing(x002, y002);
}
function centroidPointFirstRing(x, y) {
  centroidStream.point = centroidPointRing;
  centroidPoint(x002 = x03 = x, y002 = y03 = y);
}
function centroidPointRing(x, y) {
  var dx = x - x03, dy = y - y03, z4 = sqrt(dx * dx + dy * dy);
  X1 += z4 * (x03 + x) / 2;
  Y1 += z4 * (y03 + y) / 2;
  Z1 += z4;
  z4 = y03 * x - x03 * y;
  X2 += z4 * (x03 + x);
  Y2 += z4 * (y03 + y);
  Z2 += z4 * 3;
  centroidPoint(x03 = x, y03 = y);
}
var centroid_default = centroidStream;

// node_modules/d3-geo/src/path/context.js
function PathContext(context) {
  this._context = context;
}
PathContext.prototype = {
  _radius: 4.5,
  pointRadius: function(_2) {
    return this._radius = _2, this;
  },
  polygonStart: function() {
    this._line = 0;
  },
  polygonEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line === 0) this._context.closePath();
    this._point = NaN;
  },
  point: function(x, y) {
    switch (this._point) {
      case 0: {
        this._context.moveTo(x, y);
        this._point = 1;
        break;
      }
      case 1: {
        this._context.lineTo(x, y);
        break;
      }
      default: {
        this._context.moveTo(x + this._radius, y);
        this._context.arc(x, y, this._radius, 0, tau);
        break;
      }
    }
  },
  result: noop
};

// node_modules/d3-geo/src/path/measure.js
var lengthSum2 = adder_default();
var lengthRing;
var x003;
var y003;
var x04;
var y04;
var lengthStream2 = {
  point: noop,
  lineStart: function() {
    lengthStream2.point = lengthPointFirst2;
  },
  lineEnd: function() {
    if (lengthRing) lengthPoint2(x003, y003);
    lengthStream2.point = noop;
  },
  polygonStart: function() {
    lengthRing = true;
  },
  polygonEnd: function() {
    lengthRing = null;
  },
  result: function() {
    var length = +lengthSum2;
    lengthSum2.reset();
    return length;
  }
};
function lengthPointFirst2(x, y) {
  lengthStream2.point = lengthPoint2;
  x003 = x04 = x, y003 = y04 = y;
}
function lengthPoint2(x, y) {
  x04 -= x, y04 -= y;
  lengthSum2.add(sqrt(x04 * x04 + y04 * y04));
  x04 = x, y04 = y;
}
var measure_default = lengthStream2;

// node_modules/d3-geo/src/path/string.js
function PathString() {
  this._string = [];
}
PathString.prototype = {
  _radius: 4.5,
  _circle: circle(4.5),
  pointRadius: function(_2) {
    if ((_2 = +_2) !== this._radius) this._radius = _2, this._circle = null;
    return this;
  },
  polygonStart: function() {
    this._line = 0;
  },
  polygonEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line === 0) this._string.push("Z");
    this._point = NaN;
  },
  point: function(x, y) {
    switch (this._point) {
      case 0: {
        this._string.push("M", x, ",", y);
        this._point = 1;
        break;
      }
      case 1: {
        this._string.push("L", x, ",", y);
        break;
      }
      default: {
        if (this._circle == null) this._circle = circle(this._radius);
        this._string.push("M", x, ",", y, this._circle);
        break;
      }
    }
  },
  result: function() {
    if (this._string.length) {
      var result = this._string.join("");
      this._string = [];
      return result;
    } else {
      return null;
    }
  }
};
function circle(radius) {
  return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
}

// node_modules/d3-geo/src/path/index.js
function path_default(projection2, context) {
  var pointRadius = 4.5, projectionStream, contextStream;
  function path(object2) {
    if (object2) {
      if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
      stream_default(object2, projectionStream(contextStream));
    }
    return contextStream.result();
  }
  path.area = function(object2) {
    stream_default(object2, projectionStream(area_default));
    return area_default.result();
  };
  path.measure = function(object2) {
    stream_default(object2, projectionStream(measure_default));
    return measure_default.result();
  };
  path.bounds = function(object2) {
    stream_default(object2, projectionStream(bounds_default));
    return bounds_default.result();
  };
  path.centroid = function(object2) {
    stream_default(object2, projectionStream(centroid_default));
    return centroid_default.result();
  };
  path.projection = function(_2) {
    return arguments.length ? (projectionStream = _2 == null ? (projection2 = null, identity_default2) : (projection2 = _2).stream, path) : projection2;
  };
  path.context = function(_2) {
    if (!arguments.length) return context;
    contextStream = _2 == null ? (context = null, new PathString()) : new PathContext(context = _2);
    if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
    return path;
  };
  path.pointRadius = function(_2) {
    if (!arguments.length) return pointRadius;
    pointRadius = typeof _2 === "function" ? _2 : (contextStream.pointRadius(+_2), +_2);
    return path;
  };
  return path.projection(projection2).context(context);
}

// node_modules/d3-geo/src/transform.js
function transformer(methods) {
  return function(stream) {
    var s = new TransformStream();
    for (var key in methods) s[key] = methods[key];
    s.stream = stream;
    return s;
  };
}
function TransformStream() {
}
TransformStream.prototype = {
  constructor: TransformStream,
  point: function(x, y) {
    this.stream.point(x, y);
  },
  sphere: function() {
    this.stream.sphere();
  },
  lineStart: function() {
    this.stream.lineStart();
  },
  lineEnd: function() {
    this.stream.lineEnd();
  },
  polygonStart: function() {
    this.stream.polygonStart();
  },
  polygonEnd: function() {
    this.stream.polygonEnd();
  }
};

// node_modules/d3-geo/src/projection/fit.js
function fit(projection2, fitBounds, object2) {
  var clip = projection2.clipExtent && projection2.clipExtent();
  projection2.scale(150).translate([0, 0]);
  if (clip != null) projection2.clipExtent(null);
  stream_default(object2, projection2.stream(bounds_default));
  fitBounds(bounds_default.result());
  if (clip != null) projection2.clipExtent(clip);
  return projection2;
}
function fitExtent(projection2, extent, object2) {
  return fit(projection2, function(b) {
    var w = extent[1][0] - extent[0][0], h = extent[1][1] - extent[0][1], k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])), x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2, y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
    projection2.scale(150 * k).translate([x, y]);
  }, object2);
}
function fitSize(projection2, size, object2) {
  return fitExtent(projection2, [[0, 0], size], object2);
}
function fitWidth(projection2, width, object2) {
  return fit(projection2, function(b) {
    var w = +width, k = w / (b[1][0] - b[0][0]), x = (w - k * (b[1][0] + b[0][0])) / 2, y = -k * b[0][1];
    projection2.scale(150 * k).translate([x, y]);
  }, object2);
}
function fitHeight(projection2, height, object2) {
  return fit(projection2, function(b) {
    var h = +height, k = h / (b[1][1] - b[0][1]), x = -k * b[0][0], y = (h - k * (b[1][1] + b[0][1])) / 2;
    projection2.scale(150 * k).translate([x, y]);
  }, object2);
}

// node_modules/d3-geo/src/projection/resample.js
var maxDepth = 16;
var cosMinDistance = cos(30 * radians);
function resample_default(project, delta2) {
  return +delta2 ? resample(project, delta2) : resampleNone(project);
}
function resampleNone(project) {
  return transformer({
    point: function(x, y) {
      x = project(x, y);
      this.stream.point(x[0], x[1]);
    }
  });
}
function resample(project, delta2) {
  function resampleLineTo(x05, y05, lambda02, a0, b0, c0, x12, y12, lambda1, a1, b1, c1, depth, stream) {
    var dx = x12 - x05, dy = y12 - y05, d2 = dx * dx + dy * dy;
    if (d2 > 4 * delta2 && depth--) {
      var a = a0 + a1, b = b0 + b1, c = c0 + c1, m2 = sqrt(a * a + b * b + c * c), phi2 = asin(c /= m2), lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda02 - lambda1) < epsilon ? (lambda02 + lambda1) / 2 : atan2(b, a), p2 = project(lambda2, phi2), x2 = p2[0], y2 = p2[1], dx2 = x2 - x05, dy2 = y2 - y05, dz = dy * dx2 - dx * dy2;
      if (dz * dz / d2 > delta2 || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
        resampleLineTo(x05, y05, lambda02, a0, b0, c0, x2, y2, lambda2, a /= m2, b /= m2, c, depth, stream);
        stream.point(x2, y2);
        resampleLineTo(x2, y2, lambda2, a, b, c, x12, y12, lambda1, a1, b1, c1, depth, stream);
      }
    }
  }
  return function(stream) {
    var lambda00, x004, y004, a00, b00, c00, lambda02, x05, y05, a0, b0, c0;
    var resampleStream = {
      point,
      lineStart,
      lineEnd,
      polygonStart: function() {
        stream.polygonStart();
        resampleStream.lineStart = ringStart;
      },
      polygonEnd: function() {
        stream.polygonEnd();
        resampleStream.lineStart = lineStart;
      }
    };
    function point(x, y) {
      x = project(x, y);
      stream.point(x[0], x[1]);
    }
    function lineStart() {
      x05 = NaN;
      resampleStream.point = linePoint;
      stream.lineStart();
    }
    function linePoint(lambda, phi) {
      var c = cartesian([lambda, phi]), p2 = project(lambda, phi);
      resampleLineTo(x05, y05, lambda02, a0, b0, c0, x05 = p2[0], y05 = p2[1], lambda02 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
      stream.point(x05, y05);
    }
    function lineEnd() {
      resampleStream.point = point;
      stream.lineEnd();
    }
    function ringStart() {
      lineStart();
      resampleStream.point = ringPoint;
      resampleStream.lineEnd = ringEnd;
    }
    function ringPoint(lambda, phi) {
      linePoint(lambda00 = lambda, phi), x004 = x05, y004 = y05, a00 = a0, b00 = b0, c00 = c0;
      resampleStream.point = linePoint;
    }
    function ringEnd() {
      resampleLineTo(x05, y05, lambda02, a0, b0, c0, x004, y004, lambda00, a00, b00, c00, maxDepth, stream);
      resampleStream.lineEnd = lineEnd;
      lineEnd();
    }
    return resampleStream;
  };
}

// node_modules/d3-geo/src/projection/index.js
var transformRadians = transformer({
  point: function(x, y) {
    this.stream.point(x * radians, y * radians);
  }
});
function transformRotate(rotate) {
  return transformer({
    point: function(x, y) {
      var r2 = rotate(x, y);
      return this.stream.point(r2[0], r2[1]);
    }
  });
}
function scaleTranslate(k, dx, dy, sx, sy) {
  function transform(x, y) {
    x *= sx;
    y *= sy;
    return [dx + k * x, dy - k * y];
  }
  transform.invert = function(x, y) {
    return [(x - dx) / k * sx, (dy - y) / k * sy];
  };
  return transform;
}
function scaleTranslateRotate(k, dx, dy, sx, sy, alpha) {
  var cosAlpha = cos(alpha), sinAlpha = sin(alpha), a = cosAlpha * k, b = sinAlpha * k, ai = cosAlpha / k, bi = sinAlpha / k, ci = (sinAlpha * dy - cosAlpha * dx) / k, fi = (sinAlpha * dx + cosAlpha * dy) / k;
  function transform(x, y) {
    x *= sx;
    y *= sy;
    return [a * x - b * y + dx, dy - b * x - a * y];
  }
  transform.invert = function(x, y) {
    return [sx * (ai * x - bi * y + ci), sy * (fi - bi * x - ai * y)];
  };
  return transform;
}
function projection(project) {
  return projectionMutator(function() {
    return project;
  })();
}
function projectionMutator(projectAt) {
  var project, k = 150, x = 480, y = 250, lambda = 0, phi = 0, deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, alpha = 0, sx = 1, sy = 1, theta = null, preclip = antimeridian_default, x05 = null, y05, x12, y12, postclip = identity_default2, delta2 = 0.5, projectResample, projectTransform, projectRotateTransform, cache, cacheStream;
  function projection2(point) {
    return projectRotateTransform(point[0] * radians, point[1] * radians);
  }
  function invert(point) {
    point = projectRotateTransform.invert(point[0], point[1]);
    return point && [point[0] * degrees, point[1] * degrees];
  }
  projection2.stream = function(stream) {
    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
  };
  projection2.preclip = function(_2) {
    return arguments.length ? (preclip = _2, theta = void 0, reset()) : preclip;
  };
  projection2.postclip = function(_2) {
    return arguments.length ? (postclip = _2, x05 = y05 = x12 = y12 = null, reset()) : postclip;
  };
  projection2.clipAngle = function(_2) {
    return arguments.length ? (preclip = +_2 ? circle_default(theta = _2 * radians) : (theta = null, antimeridian_default), reset()) : theta * degrees;
  };
  projection2.clipExtent = function(_2) {
    return arguments.length ? (postclip = _2 == null ? (x05 = y05 = x12 = y12 = null, identity_default2) : clipRectangle(x05 = +_2[0][0], y05 = +_2[0][1], x12 = +_2[1][0], y12 = +_2[1][1]), reset()) : x05 == null ? null : [[x05, y05], [x12, y12]];
  };
  projection2.scale = function(_2) {
    return arguments.length ? (k = +_2, recenter()) : k;
  };
  projection2.translate = function(_2) {
    return arguments.length ? (x = +_2[0], y = +_2[1], recenter()) : [x, y];
  };
  projection2.center = function(_2) {
    return arguments.length ? (lambda = _2[0] % 360 * radians, phi = _2[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];
  };
  projection2.rotate = function(_2) {
    return arguments.length ? (deltaLambda = _2[0] % 360 * radians, deltaPhi = _2[1] % 360 * radians, deltaGamma = _2.length > 2 ? _2[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];
  };
  projection2.angle = function(_2) {
    return arguments.length ? (alpha = _2 % 360 * radians, recenter()) : alpha * degrees;
  };
  projection2.reflectX = function(_2) {
    return arguments.length ? (sx = _2 ? -1 : 1, recenter()) : sx < 0;
  };
  projection2.reflectY = function(_2) {
    return arguments.length ? (sy = _2 ? -1 : 1, recenter()) : sy < 0;
  };
  projection2.precision = function(_2) {
    return arguments.length ? (projectResample = resample_default(projectTransform, delta2 = _2 * _2), reset()) : sqrt(delta2);
  };
  projection2.fitExtent = function(extent, object2) {
    return fitExtent(projection2, extent, object2);
  };
  projection2.fitSize = function(size, object2) {
    return fitSize(projection2, size, object2);
  };
  projection2.fitWidth = function(width, object2) {
    return fitWidth(projection2, width, object2);
  };
  projection2.fitHeight = function(height, object2) {
    return fitHeight(projection2, height, object2);
  };
  function recenter() {
    var center = scaleTranslateRotate(k, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi)), transform = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], sx, sy, alpha);
    rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);
    projectTransform = compose_default(project, transform);
    projectRotateTransform = compose_default(rotate, projectTransform);
    projectResample = resample_default(projectTransform, delta2);
    return reset();
  }
  function reset() {
    cache = cacheStream = null;
    return projection2;
  }
  return function() {
    project = projectAt.apply(this, arguments);
    projection2.invert = project.invert && invert;
    return recenter();
  };
}

// node_modules/d3-geo/src/projection/azimuthal.js
function azimuthalRaw(scale) {
  return function(x, y) {
    var cx = cos(x), cy = cos(y), k = scale(cx * cy);
    return [
      k * cy * sin(x),
      k * sin(y)
    ];
  };
}
function azimuthalInvert(angle) {
  return function(x, y) {
    var z4 = sqrt(x * x + y * y), c = angle(z4), sc = sin(c), cc = cos(c);
    return [
      atan2(x * sc, z4 * cc),
      asin(z4 && y * sc / z4)
    ];
  };
}

// node_modules/d3-geo/src/projection/azimuthalEqualArea.js
var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {
  return sqrt(2 / (1 + cxcy));
});
azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z4) {
  return 2 * asin(z4 / 2);
});
function azimuthalEqualArea_default() {
  return projection(azimuthalEqualAreaRaw).scale(124.75).clipAngle(180 - 1e-3);
}

// node_modules/d3-geo/src/projection/azimuthalEquidistant.js
var azimuthalEquidistantRaw = azimuthalRaw(function(c) {
  return (c = acos(c)) && c / sin(c);
});
azimuthalEquidistantRaw.invert = azimuthalInvert(function(z4) {
  return z4;
});
function azimuthalEquidistant_default() {
  return projection(azimuthalEquidistantRaw).scale(79.4188).clipAngle(180 - 1e-3);
}

// node_modules/d3-geo/src/projection/mercator.js
function mercatorRaw(lambda, phi) {
  return [lambda, log(tan((halfPi + phi) / 2))];
}
mercatorRaw.invert = function(x, y) {
  return [x, 2 * atan(exp(y)) - halfPi];
};
function mercator_default() {
  return mercatorProjection(mercatorRaw).scale(961 / tau);
}
function mercatorProjection(project) {
  var m2 = projection(project), center = m2.center, scale = m2.scale, translate = m2.translate, clipExtent = m2.clipExtent, x05 = null, y05, x12, y12;
  m2.scale = function(_2) {
    return arguments.length ? (scale(_2), reclip()) : scale();
  };
  m2.translate = function(_2) {
    return arguments.length ? (translate(_2), reclip()) : translate();
  };
  m2.center = function(_2) {
    return arguments.length ? (center(_2), reclip()) : center();
  };
  m2.clipExtent = function(_2) {
    return arguments.length ? (_2 == null ? x05 = y05 = x12 = y12 = null : (x05 = +_2[0][0], y05 = +_2[0][1], x12 = +_2[1][0], y12 = +_2[1][1]), reclip()) : x05 == null ? null : [[x05, y05], [x12, y12]];
  };
  function reclip() {
    var k = pi * scale(), t2 = m2(rotation_default(m2.rotate()).invert([0, 0]));
    return clipExtent(x05 == null ? [[t2[0] - k, t2[1] - k], [t2[0] + k, t2[1] + k]] : project === mercatorRaw ? [[Math.max(t2[0] - k, x05), y05], [Math.min(t2[0] + k, x12), y12]] : [[x05, Math.max(t2[1] - k, y05)], [x12, Math.min(t2[1] + k, y12)]]);
  }
  return reclip();
}

// node_modules/d3-geo/src/projection/equirectangular.js
function equirectangularRaw(lambda, phi) {
  return [lambda, phi];
}
equirectangularRaw.invert = equirectangularRaw;
function equirectangular_default() {
  return projection(equirectangularRaw).scale(152.63);
}

// node_modules/d3-geo/src/projection/equalEarth.js
var A1 = 1.340264;
var A2 = -0.081106;
var A3 = 893e-6;
var A4 = 3796e-6;
var M = sqrt(3) / 2;
var iterations = 12;
function equalEarthRaw(lambda, phi) {
  var l = asin(M * sin(phi)), l2 = l * l, l6 = l2 * l2 * l2;
  return [
    lambda * cos(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))),
    l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))
  ];
}
equalEarthRaw.invert = function(x, y) {
  var l = y, l2 = l * l, l6 = l2 * l2 * l2;
  for (var i2 = 0, delta, fy, fpy; i2 < iterations; ++i2) {
    fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;
    fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);
    l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;
    if (abs(delta) < epsilon2) break;
  }
  return [
    M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / cos(l),
    asin(sin(l) / M)
  ];
};
function equalEarth_default() {
  return projection(equalEarthRaw).scale(177.158);
}

// node_modules/d3-geo/src/projection/gnomonic.js
function gnomonicRaw(x, y) {
  var cy = cos(y), k = cos(x) * cy;
  return [cy * sin(x) / k, sin(y) / k];
}
gnomonicRaw.invert = azimuthalInvert(atan);
function gnomonic_default() {
  return projection(gnomonicRaw).scale(144.049).clipAngle(60);
}

// node_modules/d3-geo/src/projection/naturalEarth1.js
function naturalEarth1Raw(lambda, phi) {
  var phi2 = phi * phi, phi4 = phi2 * phi2;
  return [
    lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (3971e-6 * phi2 - 1529e-6 * phi4))),
    phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 5916e-6 * phi4)))
  ];
}
naturalEarth1Raw.invert = function(x, y) {
  var phi = y, i2 = 25, delta;
  do {
    var phi2 = phi * phi, phi4 = phi2 * phi2;
    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 5916e-6 * phi4))) - y) / (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 5916e-6 * 11 * phi4)));
  } while (abs(delta) > epsilon && --i2 > 0);
  return [
    x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (3971e-6 - 1529e-6 * phi2)))),
    phi
  ];
};
function naturalEarth1_default() {
  return projection(naturalEarth1Raw).scale(175.295);
}

// node_modules/d3-geo/src/projection/orthographic.js
function orthographicRaw(x, y) {
  return [cos(y) * sin(x), sin(y)];
}
orthographicRaw.invert = azimuthalInvert(asin);
function orthographic_default() {
  return projection(orthographicRaw).scale(249.5).clipAngle(90 + epsilon);
}

// node_modules/d3-geo/src/projection/stereographic.js
function stereographicRaw(x, y) {
  var cy = cos(y), k = 1 + cos(x) * cy;
  return [cy * sin(x) / k, sin(y) / k];
}
stereographicRaw.invert = azimuthalInvert(function(z4) {
  return 2 * atan(z4);
});
function stereographic_default() {
  return projection(stereographicRaw).scale(250).clipAngle(142);
}

// node_modules/d3-geo/src/projection/transverseMercator.js
function transverseMercatorRaw(lambda, phi) {
  return [log(tan((halfPi + phi) / 2)), -lambda];
}
transverseMercatorRaw.invert = function(x, y) {
  return [-y, 2 * atan(exp(x)) - halfPi];
};
function transverseMercator_default() {
  var m2 = mercatorProjection(transverseMercatorRaw), center = m2.center, rotate = m2.rotate;
  m2.center = function(_2) {
    return arguments.length ? center([-_2[1], _2[0]]) : (_2 = center(), [_2[1], -_2[0]]);
  };
  m2.rotate = function(_2) {
    return arguments.length ? rotate([_2[0], _2[1], _2.length > 2 ? _2[2] + 90 : 90]) : (_2 = rotate(), [_2[0], _2[1], _2[2] - 90]);
  };
  return rotate([0, 0, 90]).scale(159.155);
}

// node_modules/@nivo/geo/dist/nivo-geo.mjs
var I = (0, import_react.memo)(function(o2) {
  var e3 = o2.path, t2 = o2.graticule, r2 = o2.lineWidth, i2 = o2.lineColor;
  return (0, import_jsx_runtime.jsx)("path", { fill: "none", strokeWidth: r2, stroke: i2, d: e3(t2()) });
});
var q = (0, import_react.memo)(function(o2) {
  var e3, t2 = o2.feature, r2 = o2.path, i2 = o2.fillColor, n2 = o2.borderWidth, a = o2.borderColor, l = o2.onClick, u = o2.onMouseEnter, d = o2.onMouseMove, c = o2.onMouseLeave;
  return (0, import_jsx_runtime.jsx)("path", { fill: null != (e3 = null == t2 ? void 0 : t2.fill) ? e3 : i2, strokeWidth: n2, stroke: a, strokeLinejoin: "bevel", d: r2(t2), onMouseEnter: function(o3) {
    return u(t2, o3);
  }, onMouseMove: function(o3) {
    return d(t2, o3);
  }, onMouseLeave: function(o3) {
    return c(t2, o3);
  }, onClick: function(o3) {
    return l(t2, o3);
  } }, t2.id);
});
function D() {
  return D = Object.assign ? Object.assign.bind() : function(o2) {
    for (var e3 = 1; e3 < arguments.length; e3++) {
      var t2 = arguments[e3];
      for (var r2 in t2) ({}).hasOwnProperty.call(t2, r2) && (o2[r2] = t2[r2]);
    }
    return o2;
  }, D.apply(null, arguments);
}
var O = { azimuthalEqualArea: azimuthalEqualArea_default, azimuthalEquidistant: azimuthalEquidistant_default, gnomonic: gnomonic_default, orthographic: orthographic_default, stereographic: stereographic_default, equalEarth: equalEarth_default, equirectangular: equirectangular_default, mercator: mercator_default, transverseMercator: transverseMercator_default, naturalEarth1: naturalEarth1_default };
var z3 = function(o2) {
  var t2 = o2.width, r2 = o2.height, i2 = o2.projectionType, n2 = o2.projectionScale, a = o2.projectionTranslation, l = o2.projectionRotation, u = o2.fillColor, d = o2.borderWidth, c = o2.borderColor, f = a[0], h = a[1], s = l[0], g = l[1], p2 = l[2], m2 = (0, import_react.useMemo)(function() {
    return O[i2]().scale(n2).translate([t2 * f, r2 * h]).rotate([s, g, p2]);
  }, [t2, r2, i2, n2, f, h, s, g, p2]), C2 = (0, import_react.useMemo)(function() {
    return path_default(m2);
  }, [m2]), b = (0, import_react.useMemo)(function() {
    return graticule();
  }, []), j = z(), w = (0, import_react.useMemo)(function() {
    return "function" == typeof d ? d : function() {
      return d;
    };
  }, [d]), W = Ye(c, j), y = (0, import_react.useMemo)(function() {
    return "function" == typeof u ? u : function() {
      return u;
    };
  }, [u]);
  return { projection: m2, path: C2, graticule: b, getBorderWidth: w, getBorderColor: W, getFillColor: y };
};
var K = function(o2) {
  var t2 = o2.features, r2 = o2.data, i2 = o2.match, n2 = o2.label, l = o2.value, u = o2.valueFormat, d = o2.colors, c = o2.unknownColor, f = o2.domain, h = (0, import_react.useMemo)(function() {
    return (0, import_isFunction.default)(i2) ? i2 : function(o3, e3) {
      var t3 = (0, import_get.default)(o3, i2), r3 = (0, import_get.default)(e3, i2);
      return t3 && t3 === r3;
    };
  }, [i2]), v = (0, import_react.useMemo)(function() {
    return (0, import_isFunction.default)(n2) ? n2 : function(o3) {
      return (0, import_get.default)(o3, n2);
    };
  }, [n2]), s = (0, import_react.useMemo)(function() {
    return (0, import_isFunction.default)(l) ? l : function(o3) {
      return (0, import_get.default)(o3, l);
    };
  }, [l]), g = (0, import_react.useMemo)(function() {
    return void 0 === u ? function(o3) {
      return o3;
    } : (0, import_isFunction.default)(u) ? u : format(u);
  }, [u]), p2 = (0, import_react.useMemo)(function() {
    return Vt(d).domain(f);
  }, [d, f]), j = (0, import_react.useMemo)(function() {
    return function(o3) {
      return void 0 === o3.value ? c : p2(o3.value);
    };
  }, [p2, c]), w = (0, import_react.useMemo)(function() {
    return t2.map(function(o3) {
      var e3 = r2.find(function(e4) {
        return h(o3, e4);
      }), t3 = s(e3);
      if (e3) {
        var i3 = D({}, o3, { data: e3, value: t3, formattedValue: g(t3) });
        return i3.color = j(i3), i3.label = v(i3), i3;
      }
      return o3;
    });
  }, [t2, r2, h, s, g, j, v]), W = P({ scale: p2, valueFormat: g });
  return { colorScale: p2, getFillColor: j, boundFeatures: w, valueFormatter: g, legendData: W };
};
var V = Gt((0, import_react.memo)(function(o2) {
  var e3 = o2.width, i2 = o2.height, n2 = o2.margin, a = o2.features, d = o2.layers, c = void 0 === d ? ["graticule", "features"] : d, f = o2.projectionType, h = void 0 === f ? "mercator" : f, g = o2.projectionScale, m2 = void 0 === g ? 100 : g, C2 = o2.projectionTranslation, b = void 0 === C2 ? [0.5, 0.5] : C2, j = o2.projectionRotation, w = void 0 === j ? [0, 0, 0] : j, W = o2.fillColor, y = void 0 === W ? "#dddddd" : W, M2 = o2.borderWidth, k = void 0 === M2 ? 0 : M2, T2 = o2.borderColor, F = void 0 === T2 ? "#000000" : T2, S = o2.enableGraticule, E2 = void 0 !== S && S, L2 = o2.graticuleLineWidth, R = void 0 === L2 ? 0.5 : L2, B = o2.graticuleLineColor, x = void 0 === B ? "#999999" : B, P2 = o2.isInteractive, G = void 0 === P2 || P2, H = o2.onClick, D2 = void 0 === H ? function() {
  } : H, O2 = o2.tooltip, K2 = o2.role, V2 = void 0 === K2 ? "img" : K2, A5 = cn(e3, i2, n2), J2 = A5.margin, N2 = A5.outerWidth, Q2 = A5.outerHeight, U2 = z3({ width: e3, height: i2, projectionType: h, projectionScale: m2, projectionTranslation: b, projectionRotation: w, fillColor: y, borderWidth: k, borderColor: F }), X3 = U2.graticule, Y3 = U2.path, Z3 = U2.getFillColor, $2 = U2.getBorderWidth, _2 = U2.getBorderColor, oo2 = z(), eo2 = z2(), to2 = eo2.showTooltipFromEvent, ro2 = eo2.hideTooltip, io2 = (0, import_react.useCallback)(function(o3, e4) {
    return G && D2 && D2(o3, e4);
  }, [G, D2]), no2 = (0, import_react.useCallback)(function(o3, e4) {
    return G && O2 && to2((0, import_jsx_runtime.jsx)(O2, { feature: o3 }), e4);
  }, [G, to2, O2]), ao = (0, import_react.useCallback)(function(o3, e4) {
    return G && O2 && to2((0, import_jsx_runtime.jsx)(O2, { feature: o3 }), e4);
  }, [G, to2, O2]), lo = (0, import_react.useCallback)(function() {
    return G && ro2();
  }, [G, ro2]);
  return (0, import_jsx_runtime.jsx)(Rt, { width: N2, height: Q2, margin: J2, theme: oo2, role: V2, children: c.map(function(e4, t2) {
    return "graticule" === e4 ? true !== E2 ? null : (0, import_jsx_runtime.jsx)(I, { path: Y3, graticule: X3, lineWidth: R, lineColor: x }, "graticule") : "features" === e4 ? (0, import_jsx_runtime.jsx)(import_react.Fragment, { children: a.map(function(o3) {
      return (0, import_jsx_runtime.jsx)(q, { feature: o3, path: Y3, fillColor: Z3(o3), borderWidth: $2(o3), borderColor: _2(o3), onMouseEnter: no2, onMouseMove: ao, onMouseLeave: lo, onClick: io2 }, o3.id);
    }) }, "features") : (0, import_jsx_runtime.jsx)(import_react.Fragment, { children: e4(o2) }, t2);
  }) });
}));
var A = function(o2) {
  return (0, import_jsx_runtime.jsx)($r, { children: function(e3) {
    var t2 = e3.width, r2 = e3.height;
    return (0, import_jsx_runtime.jsx)(V, D({ width: t2, height: r2 }, o2));
  } });
};
var J = function(o2, e3, t2, r2) {
  var i2 = kn(e3, o2), n2 = i2[0], a = i2[1];
  return t2.find(function(o3) {
    return contains_default(o3, r2.invert([n2, a]));
  });
};
var N = Gt((0, import_react.memo)(function(o2) {
  var e3 = o2.width, r2 = o2.height, a = o2.margin, u = o2.pixelRatio, d = void 0 === u ? "undefined" != typeof window && window.devicePixelRatio || 1 : u, c = o2.features, f = o2.layers, h = o2.projectionType, g = void 0 === h ? "mercator" : h, m2 = o2.projectionScale, C2 = void 0 === m2 ? 100 : m2, b = o2.projectionTranslation, j = void 0 === b ? [0.5, 0.5] : b, w = o2.projectionRotation, W = void 0 === w ? [0, 0, 0] : w, y = o2.fillColor, M2 = void 0 === y ? "#dddddd" : y, k = o2.borderWidth, T2 = void 0 === k ? 0 : k, F = o2.borderColor, S = void 0 === F ? "#000000" : F, E2 = o2.enableGraticule, L2 = void 0 !== E2 && E2, R = o2.graticuleLineWidth, B = void 0 === R ? 0.5 : R, x = o2.graticuleLineColor, P2 = void 0 === x ? "#999999" : x, G = o2.isInteractive, H = void 0 === G || G, I2 = o2.onClick, q2 = void 0 === I2 ? function() {
  } : I2, D2 = o2.onMouseMove, O2 = void 0 === D2 ? function() {
  } : D2, K2 = o2.tooltip, V2 = (0, import_react.useRef)(null), A5 = z(), N2 = cn(e3, r2, a), Q2 = N2.margin, U2 = N2.outerWidth, X3 = N2.outerHeight, Y3 = z3({ width: e3, height: r2, projectionType: g, projectionScale: C2, projectionTranslation: j, projectionRotation: W, fillColor: M2, borderWidth: T2, borderColor: S }), Z3 = Y3.projection, $2 = Y3.graticule, _2 = Y3.path, oo2 = Y3.getFillColor, eo2 = Y3.getBorderWidth, to2 = Y3.getBorderColor;
  (0, import_react.useEffect)(function() {
    if (V2) {
      V2.current.width = U2 * d, V2.current.height = X3 * d;
      var e4 = V2.current.getContext("2d");
      e4.scale(d, d), e4.fillStyle = A5.background, e4.fillRect(0, 0, U2, X3), e4.translate(Q2.left, Q2.top), _2.context(e4), f.forEach(function(t2) {
        "graticule" === t2 ? true === L2 && (e4.lineWidth = B, e4.strokeStyle = P2, e4.beginPath(), _2($2()), e4.stroke()) : "features" === t2 ? c.forEach(function(o3) {
          e4.beginPath(), _2(o3), e4.fillStyle = oo2(o3), e4.fill();
          var t3 = eo2(o3);
          t3 > 0 && (e4.strokeStyle = to2(o3), e4.lineWidth = t3, e4.stroke());
        }) : t2(e4, o2);
      });
    }
  }, [V2, U2, X3, Q2, d, A5, _2, $2, oo2, eo2, to2, c, f, L2, P2, B, o2]);
  var ro2 = z2(), io2 = ro2.showTooltipFromEvent, no2 = ro2.hideTooltip, ao = (0, import_react.useCallback)(function(o3) {
    if (H && K2) {
      var e4 = J(o3, V2.current, c, Z3);
      e4 ? io2((0, import_jsx_runtime.jsx)(K2, { feature: e4 }), o3) : no2(), null == O2 || O2(e4 || null, o3);
    }
  }, [io2, no2, H, K2, V2, c, Z3, O2]), lo = (0, import_react.useCallback)(function() {
    return H && no2();
  }, [H, no2]), uo = (0, import_react.useCallback)(function(o3) {
    if (H && q2) {
      var e4 = J(o3, V2.current, c, Z3);
      e4 && q2(e4, o3);
    }
  }, [H, V2, c, Z3, q2]);
  return (0, import_jsx_runtime.jsx)("canvas", { ref: V2, width: U2 * d, height: X3 * d, style: { width: U2, height: X3, cursor: H ? "auto" : "normal" }, onMouseMove: ao, onMouseLeave: lo, onClick: uo });
}));
var Q = function(o2) {
  return (0, import_jsx_runtime.jsx)($r, { children: function(e3) {
    var t2 = e3.width, r2 = e3.height;
    return (0, import_jsx_runtime.jsx)(N, D({ width: t2, height: r2 }, o2));
  } });
};
var U = (0, import_react.memo)(function(o2) {
  var e3 = o2.feature;
  return void 0 === e3.data ? null : (0, import_jsx_runtime.jsx)(T, { id: e3.label, color: e3.color, enableChip: true, value: e3.formattedValue });
});
var X = Gt((0, import_react.memo)(function(o2) {
  var e3 = o2.width, i2 = o2.height, n2 = o2.margin, a = o2.features, d = o2.data, c = o2.match, f = void 0 === c ? "id" : c, g = o2.label, m2 = void 0 === g ? "id" : g, C2 = o2.value, b = void 0 === C2 ? "value" : C2, j = o2.valueFormat, w = o2.projectionType, W = void 0 === w ? "mercator" : w, y = o2.projectionScale, M2 = void 0 === y ? 100 : y, k = o2.projectionTranslation, T2 = void 0 === k ? [0.5, 0.5] : k, F = o2.projectionRotation, S = void 0 === F ? [0, 0, 0] : F, E2 = o2.colors, L2 = void 0 === E2 ? "PuBuGn" : E2, R = o2.domain, B = o2.unknownColor, x = void 0 === B ? "#999" : B, P2 = o2.borderWidth, H = void 0 === P2 ? 0 : P2, O2 = o2.borderColor, V2 = void 0 === O2 ? "#000000" : O2, A5 = o2.enableGraticule, J2 = void 0 !== A5 && A5, N2 = o2.graticuleLineWidth, Q2 = void 0 === N2 ? 0.5 : N2, X3 = o2.graticuleLineColor, Y3 = void 0 === X3 ? "#999999" : X3, Z3 = o2.layers, $2 = void 0 === Z3 ? ["graticule", "features", "legends"] : Z3, _2 = o2.legends, oo2 = void 0 === _2 ? [] : _2, eo2 = o2.isInteractive, to2 = void 0 === eo2 || eo2, ro2 = o2.onClick, io2 = void 0 === ro2 ? function() {
  } : ro2, no2 = o2.tooltip, ao = void 0 === no2 ? U : no2, lo = o2.role, uo = void 0 === lo ? "img" : lo, co = o2.defs, fo = void 0 === co ? [] : co, ho = o2.fill, vo = void 0 === ho ? [] : ho, so = cn(e3, i2, n2), go = so.margin, po = so.outerWidth, mo = so.outerHeight, Co = z3({ width: e3, height: i2, projectionType: W, projectionScale: M2, projectionTranslation: T2, projectionRotation: S, fillColor: function() {
  }, borderWidth: H, borderColor: V2 }), bo = Co.graticule, jo = Co.path, wo = Co.getBorderWidth, Wo = Co.getBorderColor, yo = K({ features: a, data: d, match: f, label: m2, value: b, valueFormat: j, colors: L2, unknownColor: x, domain: R }), Mo = yo.getFillColor, ko = yo.boundFeatures, To = yo.legendData, Fo = z(), So = Mn(fo, ko, vo, { dataKey: "data", targetKey: "fill" }), Eo = z2(), Lo = Eo.showTooltipFromEvent, Ro = Eo.hideTooltip, Bo = (0, import_react.useCallback)(function(o3, e4) {
    return to2 && io2 && io2(o3, e4);
  }, [to2, io2]), xo = (0, import_react.useCallback)(function(o3, e4) {
    return to2 && ao && Lo((0, import_jsx_runtime.jsx)(ao, { feature: o3 }), e4);
  }, [to2, Lo, ao]), Po = (0, import_react.useCallback)(function(o3, e4) {
    return to2 && ao && Lo((0, import_jsx_runtime.jsx)(ao, { feature: o3 }), e4);
  }, [to2, Lo, ao]), Go = (0, import_react.useCallback)(function() {
    return to2 && Ro();
  }, [to2, Ro]);
  return (0, import_jsx_runtime.jsx)(Rt, { width: po, height: mo, margin: go, theme: Fo, defs: So, role: uo, children: $2.map(function(o3, t2) {
    return "graticule" === o3 ? true !== J2 ? null : (0, import_jsx_runtime.jsx)(I, { path: jo, graticule: bo, lineWidth: Q2, lineColor: Y3 }, "graticule") : "features" === o3 ? (0, import_jsx_runtime.jsx)(import_react.Fragment, { children: ko.map(function(o4) {
      return (0, import_jsx_runtime.jsx)(q, { feature: o4, path: jo, fillColor: Mo(o4), borderWidth: wo(o4), borderColor: Wo(o4), onMouseEnter: xo, onMouseMove: Po, onMouseLeave: Go, onClick: Bo }, o4.id);
    }) }, "features") : "legends" === o3 ? oo2.map(function(o4, t3) {
      return (0, import_jsx_runtime.jsx)(E, D({ containerWidth: e3, containerHeight: i2, data: To }, o4), t3);
    }) : (0, import_jsx_runtime.jsx)(import_react.Fragment, { children: o3({}) }, t2);
  }) });
}));
var Y = function(o2) {
  return (0, import_jsx_runtime.jsx)($r, { children: function(e3) {
    var t2 = e3.width, r2 = e3.height;
    return (0, import_jsx_runtime.jsx)(X, D({ width: t2, height: r2 }, o2));
  } });
};
var Z = function(o2, e3, t2, r2) {
  var i2 = kn(e3, o2), n2 = i2[0], a = i2[1];
  return t2.find(function(o3) {
    return contains_default(o3, r2.invert([n2, a]));
  });
};
var $ = Gt((0, import_react.memo)(function(o2) {
  var e3 = o2.width, r2 = o2.height, a = o2.margin, u = o2.pixelRatio, d = void 0 === u ? "undefined" != typeof window && window.devicePixelRatio || 1 : u, c = o2.features, f = o2.data, h = o2.match, g = void 0 === h ? "id" : h, m2 = o2.label, C2 = void 0 === m2 ? "id" : m2, b = o2.value, j = void 0 === b ? "value" : b, w = o2.valueFormat, W = o2.projectionType, y = void 0 === W ? "mercator" : W, M2 = o2.projectionScale, k = void 0 === M2 ? 100 : M2, T2 = o2.projectionTranslation, F = void 0 === T2 ? [0.5, 0.5] : T2, S = o2.projectionRotation, E2 = void 0 === S ? [0, 0, 0] : S, L2 = o2.colors, R = void 0 === L2 ? "PuBuGn" : L2, B = o2.domain, x = o2.unknownColor, P2 = void 0 === x ? "#999" : x, G = o2.borderWidth, I2 = void 0 === G ? 0 : G, q2 = o2.borderColor, O2 = void 0 === q2 ? "#000000" : q2, V2 = o2.enableGraticule, A5 = void 0 !== V2 && V2, J2 = o2.graticuleLineWidth, N2 = void 0 === J2 ? 0.5 : J2, Q2 = o2.graticuleLineColor, X3 = void 0 === Q2 ? "#999999" : Q2, Y3 = o2.layers, $2 = void 0 === Y3 ? ["graticule", "features", "legends"] : Y3, _2 = o2.legends, oo2 = void 0 === _2 ? [] : _2, eo2 = o2.isInteractive, to2 = void 0 === eo2 || eo2, ro2 = o2.onClick, io2 = void 0 === ro2 ? function() {
  } : ro2, no2 = o2.onMouseMove, ao = void 0 === no2 ? function() {
  } : no2, lo = o2.tooltip, uo = void 0 === lo ? U : lo, co = (0, import_react.useRef)(null), fo = z(), ho = cn(e3, r2, a), vo = ho.margin, so = ho.outerWidth, go = ho.outerHeight, po = z3({ width: e3, height: r2, projectionType: y, projectionScale: k, projectionTranslation: F, projectionRotation: E2, fillColor: function() {
  }, borderWidth: I2, borderColor: O2 }), mo = po.projection, Co = po.graticule, bo = po.path, jo = po.getBorderWidth, wo = po.getBorderColor, Wo = K({ features: c, data: f, match: g, label: C2, value: j, valueFormat: w, colors: R, unknownColor: P2, domain: B }), yo = Wo.getFillColor, Mo = Wo.boundFeatures, ko = Wo.legendData;
  (0, import_react.useEffect)(function() {
    if (co) {
      co.current.width = so * d, co.current.height = go * d;
      var o3 = co.current.getContext("2d");
      o3.scale(d, d), o3.fillStyle = fo.background, o3.fillRect(0, 0, so, go), o3.translate(vo.left, vo.top), bo.context(o3), $2.forEach(function(t2) {
        "graticule" === t2 ? true === A5 && (o3.lineWidth = N2, o3.strokeStyle = X3, o3.beginPath(), bo(Co()), o3.stroke()) : "features" === t2 ? Mo.forEach(function(e4) {
          o3.beginPath(), bo(e4), o3.fillStyle = yo(e4), o3.fill();
          var t3 = jo(e4);
          t3 > 0 && (o3.strokeStyle = wo(e4), o3.lineWidth = t3, o3.stroke());
        }) : "legends" === t2 && oo2.forEach(function(t3) {
          L(o3, D({}, t3, { data: ko, containerWidth: e3, containerHeight: r2, theme: fo }));
        });
      });
    }
  }, [co, e3, so, r2, go, vo, d, fo, bo, Co, yo, jo, wo, Mo, oo2, ko, $2, A5, X3, N2]);
  var To = z2(), Fo = To.showTooltipFromEvent, So = To.hideTooltip, Eo = (0, import_react.useCallback)(function(o3) {
    if (to2 && uo) {
      var e4 = Z(o3, co.current, Mo, mo);
      e4 ? Fo((0, import_jsx_runtime.jsx)(uo, { feature: e4 }), o3) : So(), null == ao || ao(e4 || null, o3);
    }
  }, [Fo, So, to2, uo, co, Mo, mo, ao]), Lo = (0, import_react.useCallback)(function() {
    return to2 && So();
  }, [to2, So]), Ro = (0, import_react.useCallback)(function(o3) {
    if (to2 && io2) {
      var e4 = Z(o3, co.current, Mo, mo);
      e4 && io2(e4, o3);
    }
  }, [to2, co, Mo, mo, io2]);
  return (0, import_jsx_runtime.jsx)("canvas", { ref: co, width: so * d, height: go * d, style: { width: so, height: go, cursor: to2 ? "auto" : "normal" }, onMouseMove: Eo, onMouseLeave: Lo, onClick: Ro });
}));
var _ = function(o2) {
  return (0, import_jsx_runtime.jsx)($r, { children: function(e3) {
    var t2 = e3.width, r2 = e3.height;
    return (0, import_jsx_runtime.jsx)($, D({ width: t2, height: r2 }, o2));
  } });
};
var oo = { projectionType: "mercator", projectionScale: 100, projectionTranslation: [0.5, 0.5], projectionRotation: [0, 0, 0], enableGraticule: false, graticuleLineWidth: 0.5, graticuleLineColor: "#999999", fillColor: "#dddddd", borderWidth: 0, borderColor: "#000000", isInteractive: true, onMouseEnter: function() {
}, onMouseLeave: function() {
}, onMouseMove: function() {
}, onClick: function() {
}, layers: ["graticule", "features"], legends: [], fill: [], defs: [] };
var eo = D({}, oo, { role: "img" });
var to = D({}, oo, { pixelRatio: "undefined" != typeof window && window.devicePixelRatio || 1 });
var ro = { match: "id", label: "id", value: "value", colors: "PuBuGn", unknownColor: "#999", tooltip: U, layers: ["graticule", "features", "legends"] };
var io = D({}, eo, ro, { role: "img" });
var no = D({}, to, ro);
export {
  X as Choropleth,
  $ as ChoroplethCanvas,
  no as ChoroplethCanvasDefaultProps,
  io as ChoroplethDefaultProps,
  V as GeoMap,
  N as GeoMapCanvas,
  to as GeoMapCanvasDefaultProps,
  eo as GeoMapDefaultProps,
  Y as ResponsiveChoropleth,
  _ as ResponsiveChoroplethCanvas,
  A as ResponsiveGeoMap,
  Q as ResponsiveGeoMapCanvas,
  O as projectionById,
  K as useChoropleth,
  z3 as useGeoMap
};
//# sourceMappingURL=@nivo_geo.js.map
