{"version":3,"file":"nivo-stream.cjs.js","sources":["../src/StreamLayer.tsx","../src/StreamLayers.tsx","../src/StreamDots.tsx","../src/StreamSlicesItem.tsx","../src/StreamSlices.tsx","../src/props.ts","../src/StreamDotsItem.tsx","../src/LayerTooltip.tsx","../src/StackTooltip.tsx","../src/hooks.ts","../src/Stream.tsx","../src/ResponsiveStream.tsx"],"sourcesContent":["import { useCallback, createElement, MouseEvent } from 'react'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport { InheritedColorConfigCustomFunction } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { StreamCommonProps, StreamDatum, StreamLayerData } from './types'\n\ninterface StreamLayerProps<RawDatum extends StreamDatum> {\n    layer: StreamLayerData\n    fillOpacity: number\n    borderWidth: number\n    getBorderColor: InheritedColorConfigCustomFunction<StreamLayerData>\n    isInteractive: boolean\n    tooltip: StreamCommonProps<RawDatum>['tooltip']\n}\n\nexport const StreamLayer = <RawDatum extends StreamDatum>({\n    layer,\n    fillOpacity,\n    borderWidth,\n    getBorderColor,\n    isInteractive,\n    tooltip,\n}: StreamLayerProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleMouseHover = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { layer }), event, 'left')\n        },\n        [showTooltipFromEvent, tooltip, layer]\n    )\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const animatedPath = useAnimatedPath(layer.path)\n    const animatedProps = useSpring({\n        color: layer.color,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.path\n            d={animatedPath}\n            fill={layer.fill ? layer.fill : animatedProps.color}\n            fillOpacity={fillOpacity}\n            stroke={getBorderColor(layer)}\n            strokeWidth={borderWidth}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? hideTooltip : undefined}\n        />\n    )\n}\n","import { InheritedColorConfigCustomFunction } from '@nivo/colors'\nimport { StreamLayer } from './StreamLayer'\nimport { StreamCommonProps, StreamLayerData, StreamDatum } from './types'\n\ninterface StreamLayersProps<RawDatum extends StreamDatum> {\n    layers: StreamLayerData[]\n    fillOpacity: number\n    borderWidth: number\n    getBorderColor: InheritedColorConfigCustomFunction<StreamLayerData>\n    isInteractive: boolean\n    tooltip: StreamCommonProps<RawDatum>['tooltip']\n}\n\nexport const StreamLayers = <RawDatum extends StreamDatum>({\n    layers,\n    fillOpacity,\n    borderWidth,\n    getBorderColor,\n    isInteractive,\n    tooltip,\n}: StreamLayersProps<RawDatum>) => (\n    <g>\n        {layers.map((layer, i) => (\n            <StreamLayer<RawDatum>\n                key={i}\n                layer={layer}\n                getBorderColor={getBorderColor}\n                borderWidth={borderWidth}\n                fillOpacity={fillOpacity}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n            />\n        ))}\n    </g>\n)\n","import { createElement } from 'react'\nimport { StreamSvgProps, StreamLayerDatum, StreamDatum } from './types'\n\ninterface StreamDotsProps<RawDatum extends StreamDatum> {\n    id: string | number\n    color: string\n    data: StreamLayerDatum[]\n    dotComponent: Exclude<StreamSvgProps<RawDatum>['dotComponent'], undefined>\n    position: 'start' | 'center' | 'end'\n    getSize: (datum: StreamLayerDatum) => number\n    getColor: (datum: StreamLayerDatum) => string\n    getBorderWidth: (datum: StreamLayerDatum) => number\n    getBorderColor: (datum: StreamLayerDatum) => string\n}\n\nconst getDotY = <RawDatum extends StreamDatum>(\n    datum: StreamLayerDatum,\n    position: StreamDotsProps<RawDatum>['position']\n) => {\n    let y = datum.y2\n    if (position === 'center') {\n        y = datum.y1 + (datum.y2 - datum.y1) / 2\n    } else if (position === 'start') {\n        y = datum.y1\n    }\n\n    return y\n}\n\nexport const StreamDots = <RawDatum extends StreamDatum>({\n    data,\n    dotComponent,\n    position,\n    getSize,\n    getColor,\n    getBorderWidth,\n    getBorderColor,\n}: StreamDotsProps<RawDatum>) => (\n    <>\n        {data.map((datum, i) => {\n            return createElement(dotComponent, {\n                key: i,\n                datum,\n                x: datum.x,\n                y: getDotY<RawDatum>(datum, position),\n                size: getSize(datum),\n                color: getColor(datum),\n                borderWidth: getBorderWidth(datum),\n                borderColor: getBorderColor(datum),\n            })\n        })}\n    </>\n)\n","import { createElement, useCallback, useState, MouseEvent } from 'react'\nimport { useTooltip } from '@nivo/tooltip'\nimport { StreamCommonProps, StreamDatum, StreamSliceData } from './types'\n\ninterface StreamSlicesItemProps<RawDatum extends StreamDatum> {\n    slice: StreamSliceData\n    height: number\n    tooltip: StreamCommonProps<RawDatum>['stackTooltip']\n}\n\nexport const StreamSlicesItem = <RawDatum extends StreamDatum>({\n    slice,\n    height,\n    tooltip,\n}: StreamSlicesItemProps<RawDatum>) => {\n    const [isHover, setIsHover] = useState(false)\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            setIsHover(true)\n            showTooltipFromEvent(createElement(tooltip, { slice }), event, 'left')\n        },\n        [setIsHover, showTooltipFromEvent, tooltip, slice]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        setIsHover(false)\n        hideTooltip()\n    }, [setIsHover, hideTooltip])\n\n    return (\n        <g transform={`translate(${slice.x}, 0)`}>\n            {isHover && (\n                <line\n                    x1={0}\n                    x2={0}\n                    y1={0}\n                    y2={height}\n                    stroke=\"#000\"\n                    strokeOpacity={0.35}\n                    strokeWidth={1}\n                />\n            )}\n            <rect\n                x={-20}\n                width={40}\n                height={height}\n                fill=\"#000\"\n                fillOpacity={0}\n                onMouseEnter={handleMouseHover}\n                onMouseMove={handleMouseHover}\n                onMouseLeave={handleMouseLeave}\n            />\n        </g>\n    )\n}\n","import { StreamSliceData, StreamDatum, StreamCommonProps } from './types'\nimport { StreamSlicesItem } from './StreamSlicesItem'\n\ninterface StreamSlicesProps<RawDatum extends StreamDatum> {\n    slices: StreamSliceData[]\n    height: number\n    tooltip: StreamCommonProps<RawDatum>['stackTooltip']\n}\n\nexport const StreamSlices = <RawDatum extends StreamDatum>({\n    slices,\n    height,\n    tooltip,\n}: StreamSlicesProps<RawDatum>) => (\n    <g>\n        {slices.map(slice => (\n            <StreamSlicesItem<RawDatum>\n                key={slice.index}\n                slice={slice}\n                height={height}\n                tooltip={tooltip}\n            />\n        ))}\n    </g>\n)\n","import { StackOrder, StackOffset, AreaCurve } from '@nivo/core'\nimport { StreamCommonProps, StreamLayerId } from './types'\nimport { StreamDotsItem } from './StreamDotsItem'\nimport { LayerTooltip } from './LayerTooltip'\nimport { StackTooltip } from './StackTooltip'\n\nexport const defaultProps = {\n    label: 'id',\n    order: 'none' as StackOrder,\n    offsetType: 'wiggle' as StackOffset,\n    curve: 'catmullRom' as AreaCurve,\n    axisTop: null,\n    axisRight: null,\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: false,\n    enableGridY: true,\n    colors: { scheme: 'nivo' } as StreamCommonProps<any>['colors'],\n    fillOpacity: 1,\n    borderWidth: 0,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 1]],\n    } as StreamCommonProps<any>['borderColor'],\n    enableDots: false,\n    dotPosition: 'center' as StreamCommonProps<any>['dotPosition'],\n    dotComponent: StreamDotsItem,\n    dotSize: 6,\n    dotColor: { from: 'color' },\n    dotBorderWidth: 0,\n    dotBorderColor: { from: 'color' },\n    isInteractive: true,\n    tooltip: LayerTooltip,\n    enableStackTooltip: true,\n    stackTooltip: StackTooltip,\n    legends: [],\n    legendLabel: 'id',\n    role: 'application',\n}\n\nexport const svgDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'layers', 'dots', 'slices', 'legends'] as StreamLayerId[],\n    defs: [],\n    fill: [],\n    animate: true,\n    motionConfig: 'default',\n    role: 'img',\n    isFocusable: false,\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\n\nexport interface StreamDotsItemProps {\n    x: number\n    y: number\n    size: number\n    color: string\n    borderWidth: number\n    borderColor: string\n}\n\nexport const StreamDotsItem = ({\n    x,\n    y,\n    size,\n    color,\n    borderWidth,\n    borderColor,\n}: StreamDotsItemProps) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size * 0.5,\n        color,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.circle\n            cx={animatedProps.x}\n            cy={animatedProps.y}\n            r={animatedProps.radius}\n            fill={animatedProps.color}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n        />\n    )\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { TooltipProps } from './types'\n\nexport const LayerTooltip = ({ layer }: TooltipProps) => (\n    <BasicTooltip id={layer.label} enableChip={true} color={layer.color} />\n)\n","import { useMemo } from 'react'\nimport { TableTooltip, Chip } from '@nivo/tooltip'\nimport { StackTooltipProps } from './types'\n\nexport const StackTooltip = ({ slice }: StackTooltipProps) => {\n    const rows = useMemo(\n        () =>\n            slice.stack.map(p => [\n                <Chip key={p.layerId} color={p.color} />,\n                p.layerLabel,\n                p.formattedValue,\n            ]),\n        [slice]\n    )\n\n    return <TableTooltip rows={rows} />\n}\n","import { useMemo } from 'react'\nimport { area, stack as d3Stack } from 'd3-shape'\nimport {\n    usePropertyAccessor,\n    useValueFormatter,\n    useCurveInterpolation,\n    // @ts-expect-error no types\n    stackOrderFromProp,\n    // @ts-expect-error no types\n    stackOffsetFromProp,\n} from '@nivo/core'\nimport { useTheme } from '@nivo/theming'\nimport { useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport {\n    StreamCommonProps,\n    StreamCustomLayerProps,\n    StreamDataProps,\n    StreamDatum,\n    StreamLayerData,\n    StreamLayerDatum,\n    StreamSliceData,\n} from './types'\nimport { defaultProps } from './props'\nimport { createLinearScale, createPointScale } from '@nivo/scales'\n\nexport const useStream = <RawDatum extends StreamDatum>({\n    width,\n    height,\n    data,\n    keys,\n    label = defaultProps.label,\n    valueFormat,\n    offsetType = defaultProps.offsetType,\n    order = defaultProps.order,\n    curve = defaultProps.curve,\n    colors = defaultProps.colors,\n    borderColor = defaultProps.borderColor,\n    dotSize = defaultProps.dotSize,\n    dotColor = defaultProps.dotColor,\n    dotBorderWidth = defaultProps.dotBorderWidth,\n    dotBorderColor = defaultProps.dotBorderColor,\n}: {\n    width: number\n    height: number\n    data: StreamDataProps<RawDatum>['data']\n    keys: StreamDataProps<RawDatum>['keys']\n    label?: StreamCommonProps<RawDatum>['label']\n    valueFormat?: StreamCommonProps<RawDatum>['valueFormat']\n    offsetType?: StreamCommonProps<RawDatum>['offsetType']\n    order?: StreamCommonProps<RawDatum>['order']\n    curve?: StreamCommonProps<RawDatum>['curve']\n    colors?: StreamCommonProps<RawDatum>['colors']\n    dotSize?: StreamCommonProps<RawDatum>['dotSize']\n    dotColor?: StreamCommonProps<RawDatum>['dotColor']\n    dotBorderWidth?: StreamCommonProps<RawDatum>['dotBorderWidth']\n    dotBorderColor?: StreamCommonProps<RawDatum>['dotBorderColor']\n    borderColor?: StreamCommonProps<RawDatum>['borderColor']\n}) => {\n    const areaCurveFactory = useCurveInterpolation(curve)\n    const areaGenerator = useMemo(\n        () =>\n            area<StreamLayerDatum>()\n                .x(({ x }) => x)\n                .y0(({ y1 }) => y1)\n                .y1(({ y2 }) => y2)\n                .curve(areaCurveFactory),\n        [areaCurveFactory]\n    )\n\n    const stack = useMemo(\n        () =>\n            d3Stack<RawDatum, string | number>()\n                .keys(keys)\n                .offset(stackOffsetFromProp(offsetType))\n                .order(stackOrderFromProp(order)),\n        [keys, offsetType, order]\n    )\n\n    const [layers, xScale, yScale] = useMemo(() => {\n        const allMin: number[] = []\n        const allMax: number[] = []\n\n        const layers = stack(data).map(layer => {\n            return layer.map(point => {\n                allMin.push(point[0])\n                allMax.push(point[1])\n\n                return {\n                    ...point,\n                    value: point.data[layer.key] as number,\n                }\n            })\n        })\n\n        const minValue = Math.min(...allMin)\n        const maxValue = Math.max(...allMax)\n\n        const xScale = createPointScale(\n            { type: 'point' },\n            { all: Array.from({ length: data.length }, (_, i) => i), min: 0, max: data.length },\n            width\n        )\n        const yScale = createLinearScale(\n            { type: 'linear', min: minValue },\n            { all: [minValue, maxValue], min: minValue, max: maxValue },\n            height,\n            'y'\n        )\n        return [layers, xScale, yScale]\n    }, [stack, data, width, height])\n\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale<Omit<StreamLayerData, 'label' | 'color' | 'data'>>(\n        colors,\n        'id'\n    )\n    const getBorderColor = useInheritedColor<StreamLayerData>(borderColor, theme)\n\n    const getDotSize = useMemo(\n        () => (typeof dotSize === 'function' ? dotSize : () => dotSize),\n        [dotSize]\n    )\n    const getDotColor = useInheritedColor(dotColor, theme)\n    const getDotBorderWidth = useMemo(\n        () => (typeof dotBorderWidth === 'function' ? dotBorderWidth : () => dotBorderWidth),\n        [dotBorderWidth]\n    )\n    const getDotBorderColor = useInheritedColor(dotBorderColor, theme)\n\n    const getLabel = usePropertyAccessor<\n        Omit<StreamLayerData, 'label' | 'color' | 'data'>,\n        string | number\n    >(label)\n    const formatValue = useValueFormatter(valueFormat)\n\n    const enhancedLayers: StreamLayerData[] = useMemo(\n        () =>\n            layers.map((points, layerIndex) => {\n                const computedPoints: StreamLayerDatum[] = points.map((point, i) => ({\n                    layerId: keys[layerIndex],\n                    layerLabel: '',\n                    index: i,\n                    color: '',\n                    x: xScale(i) as number,\n                    value: point.value,\n                    formattedValue: formatValue(point.value),\n                    y1: yScale(point[0]),\n                    y2: yScale(point[1]),\n                }))\n\n                const layer: Omit<StreamLayerData, 'label' | 'color' | 'data'> = {\n                    id: keys[layerIndex] as string,\n                    path: areaGenerator(computedPoints) as string,\n                }\n\n                const layerWithComputedProperties: Omit<StreamLayerData, 'data'> = {\n                    ...layer,\n                    label: getLabel(layer),\n                    color: getColor(layer),\n                }\n\n                return {\n                    ...layerWithComputedProperties,\n                    data: computedPoints.map(point => {\n                        point.layerLabel = layerWithComputedProperties.label\n                        point.color = layerWithComputedProperties.color\n\n                        return point\n                    }),\n                }\n            }),\n        [layers, keys, getLabel, areaGenerator, getColor, xScale, yScale, formatValue]\n    )\n\n    const slices: StreamSliceData[] = useMemo(\n        () =>\n            Array.from({ length: data.length }, (_, i) => {\n                const sliceStack = enhancedLayers\n                    .map(layer => layer.data[i])\n                    .sort((a, b) => a.y2 - b.y2)\n\n                return {\n                    index: i,\n                    x: enhancedLayers[0].data[i].x,\n                    stack: sliceStack,\n                }\n            }),\n        [data.length, enhancedLayers]\n    )\n\n    const layerContext: StreamCustomLayerProps = useMemo(\n        () => ({\n            xScale,\n            yScale,\n            layers: enhancedLayers,\n            slices,\n        }),\n        [xScale, yScale, enhancedLayers, slices]\n    )\n\n    return {\n        xScale,\n        yScale,\n        layers: enhancedLayers,\n        slices,\n        getBorderColor,\n        getDotSize,\n        getDotColor,\n        getDotBorderWidth,\n        getDotBorderColor,\n        layerContext,\n    }\n}\n","import { createElement, Fragment, ReactNode, forwardRef, Ref, ReactElement } from 'react'\nimport {\n    Container,\n    SvgWrapper,\n    useDimensions,\n    // @ts-expect-error no types\n    bindDefs,\n    WithChartRef,\n} from '@nivo/core'\nimport { Axes, Grid } from '@nivo/axes'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { StreamLayers } from './StreamLayers'\nimport { StreamDots } from './StreamDots'\nimport { StreamSlices } from './StreamSlices'\nimport { useStream } from './hooks'\nimport { svgDefaultProps } from './props'\nimport { StreamDatum, StreamLayerId, StreamSvgProps } from './types'\n\ntype InnerStreamProps<RawDatum extends StreamDatum> = Omit<\n    StreamSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n> & {\n    forwardedRef: Ref<SVGSVGElement>\n}\n\nconst InnerStream = <RawDatum extends StreamDatum>({\n    data,\n    keys,\n    label,\n    valueFormat,\n    offsetType,\n    order,\n    curve,\n    layers: chartLayers = svgDefaultProps.layers,\n    width,\n    height,\n    margin: partialMargin,\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    colors,\n    fillOpacity = svgDefaultProps.fillOpacity,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    enableDots = svgDefaultProps.enableDots,\n    dotPosition = svgDefaultProps.dotPosition,\n    dotComponent = svgDefaultProps.dotComponent,\n    dotSize,\n    dotColor,\n    dotBorderWidth,\n    dotBorderColor,\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    enableStackTooltip = svgDefaultProps.enableStackTooltip,\n    stackTooltip = svgDefaultProps.stackTooltip,\n    legends = svgDefaultProps.legends,\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    forwardedRef,\n}: InnerStreamProps<RawDatum>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        xScale,\n        yScale,\n        layers,\n        slices,\n        getBorderColor,\n        getDotSize,\n        getDotColor,\n        getDotBorderWidth,\n        getDotBorderColor,\n        layerContext,\n    } = useStream<RawDatum>({\n        width: innerWidth,\n        height: innerHeight,\n        data,\n        keys,\n        label,\n        valueFormat,\n        offsetType,\n        order,\n        curve,\n        colors,\n        borderColor,\n        dotSize,\n        dotColor,\n        dotBorderWidth,\n        dotBorderColor,\n    })\n\n    const boundDefs = bindDefs(defs, layers, fill)\n\n    const layerById: Record<StreamLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        layers: null,\n        dots: null,\n        slices: null,\n        legends: null,\n    }\n\n    if (chartLayers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n            />\n        )\n    }\n\n    if (chartLayers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (chartLayers.includes('layers')) {\n        layerById.layers = (\n            <StreamLayers<RawDatum>\n                key=\"layers\"\n                layers={layers}\n                fillOpacity={fillOpacity}\n                borderWidth={borderWidth}\n                getBorderColor={getBorderColor}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n            />\n        )\n    }\n\n    if (chartLayers.includes('dots') && enableDots) {\n        layerById.dots = (\n            <Fragment key=\"dots\">\n                {layers.map(layer => (\n                    <StreamDots\n                        key={layer.id}\n                        id={layer.id}\n                        color={layer.color}\n                        data={layer.data}\n                        dotComponent={dotComponent}\n                        position={dotPosition}\n                        getSize={getDotSize}\n                        getColor={getDotColor}\n                        getBorderWidth={getDotBorderWidth}\n                        getBorderColor={getDotBorderColor}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    if (chartLayers.includes('slices') && isInteractive && enableStackTooltip) {\n        layerById.slices = (\n            <StreamSlices<RawDatum>\n                key=\"slices\"\n                slices={slices}\n                height={innerHeight}\n                tooltip={stackTooltip}\n            />\n        )\n    }\n\n    if (chartLayers.includes('legends')) {\n        layerById.legends = (\n            <Fragment key=\"legends\">\n                {legends.map((legend, i) => {\n                    const legendData = layers\n                        .map(layer => ({\n                            id: layer.id,\n                            label: layer.label,\n                            color: layer.color,\n                            fill: layer.fill,\n                        }))\n                        .reverse()\n\n                    return (\n                        <BoxLegendSvg\n                            key={i}\n                            {...legend}\n                            containerWidth={innerWidth}\n                            containerHeight={innerHeight}\n                            data={legendData}\n                        />\n                    )\n                })}\n            </Fragment>\n        )\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n            ref={forwardedRef}\n        >\n            {chartLayers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Stream = forwardRef(\n    <RawDatum extends StreamDatum>(\n        {\n            isInteractive = svgDefaultProps.isInteractive,\n            animate = svgDefaultProps.animate,\n            motionConfig = svgDefaultProps.motionConfig,\n            theme,\n            renderWrapper,\n            ...props\n        }: StreamSvgProps<RawDatum>,\n        ref: Ref<SVGSVGElement>\n    ) => (\n        <Container\n            animate={animate}\n            isInteractive={isInteractive}\n            motionConfig={motionConfig}\n            renderWrapper={renderWrapper}\n            theme={theme}\n        >\n            <InnerStream<RawDatum> {...props} isInteractive={isInteractive} forwardedRef={ref} />\n        </Container>\n    )\n) as <RawDatum extends StreamDatum>(\n    props: WithChartRef<StreamSvgProps<RawDatum>, SVGSVGElement>\n) => ReactElement\n","import { forwardRef, Ref, ReactElement } from 'react'\nimport { ResponsiveWrapper, ResponsiveProps, WithChartRef } from '@nivo/core'\nimport { StreamDatum, StreamSvgProps } from './types'\nimport { Stream } from './Stream'\n\nexport const ResponsiveStream = forwardRef(\n    <RawDatum extends StreamDatum>(\n        {\n            defaultWidth,\n            defaultHeight,\n            onResize,\n            debounceResize,\n            ...props\n        }: ResponsiveProps<StreamSvgProps<RawDatum>>,\n        ref: Ref<SVGSVGElement>\n    ) => (\n        <ResponsiveWrapper\n            defaultWidth={defaultWidth}\n            defaultHeight={defaultHeight}\n            onResize={onResize}\n            debounceResize={debounceResize}\n        >\n            {({ width, height }) => (\n                <Stream<RawDatum> {...props} width={width} height={height} ref={ref} />\n            )}\n        </ResponsiveWrapper>\n    )\n) as <RawDatum extends StreamDatum>(\n    props: WithChartRef<ResponsiveProps<StreamSvgProps<RawDatum>>, SVGSVGElement>\n) => ReactElement\n"],"names":["StreamLayer","_ref","layer","fillOpacity","borderWidth","getBorderColor","isInteractive","tooltip","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseHover","useCallback","event","createElement","_useMotionConfig","useMotionConfig","animate","springConfig","config","animatedPath","useAnimatedPath","path","animatedProps","useSpring","color","immediate","_jsx","jsx","animated","d","fill","stroke","strokeWidth","onMouseMove","undefined","onMouseEnter","onMouseLeave","StreamLayers","layers","children","map","i","getDotY","datum","position","y","y2","y1","StreamDots","data","dotComponent","getSize","getColor","getBorderWidth","_Fragment","key","x","size","borderColor","StreamSlicesItem","slice","height","_useState","useState","isHover","setIsHover","handleMouseLeave","_jsxs","transform","x1","x2","strokeOpacity","width","StreamSlices","slices","index","defaultProps","label","order","offsetType","curve","axisTop","axisRight","axisBottom","axisLeft","enableGridX","enableGridY","colors","scheme","from","modifiers","enableDots","dotPosition","radius","circle","cx","cy","r","dotSize","dotColor","dotBorderWidth","dotBorderColor","BasicTooltip","id","enableChip","enableStackTooltip","stackTooltip","rows","useMemo","stack","p","Chip","layerId","layerLabel","formattedValue","TableTooltip","legends","legendLabel","role","svgDefaultProps","_extends","defs","motionConfig","isFocusable","useStream","keys","_ref$label","valueFormat","_ref$offsetType","_ref$order","_ref$curve","_ref$colors","_ref$borderColor","_ref$dotSize","_ref$dotColor","_ref$dotBorderWidth","_ref$dotBorderColor","areaCurveFactory","useCurveInterpolation","areaGenerator","area","_ref2","y0","_ref3","_ref4","d3Stack","offset","stackOffsetFromProp","stackOrderFromProp","_useMemo","allMin","allMax","point","push","value","minValue","Math","min","apply","maxValue","max","createPointScale","type","all","Array","length","_","createLinearScale","xScale","yScale","theme","useTheme","useOrdinalColorScale","useInheritedColor","getDotSize","getDotColor","getDotBorderWidth","getDotBorderColor","getLabel","usePropertyAccessor","formatValue","useValueFormatter","enhancedLayers","points","layerIndex","computedPoints","layerWithComputedProperties","sliceStack","sort","a","b","layerContext","InnerStream","_ref$layers","chartLayers","partialMargin","margin","_ref$axisBottom","_ref$axisLeft","_ref$enableGridX","_ref$enableGridY","_ref$fillOpacity","_ref$borderWidth","_ref$defs","_ref$fill","_ref$enableDots","_ref$dotPosition","_ref$dotComponent","_ref$isInteractive","_ref$tooltip","_ref$enableStackToolt","_ref$stackTooltip","_ref$legends","ariaLabel","ariaLabelledBy","ariaDescribedBy","forwardedRef","_useDimensions","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","_useStream","boundDefs","bindDefs","layerById","grid","axes","dots","includes","Grid","Axes","top","right","bottom","left","Fragment","legend","legendData","reverse","BoxLegendSvg","containerWidth","containerHeight","SvgWrapper","ref","_layerById$layer","Stream","forwardRef","_ref2$isInteractive","_ref2$animate","_ref2$motionConfig","renderWrapper","props","_objectWithoutPropertiesLoose","_excluded","Container","ResponsiveStream","defaultWidth","defaultHeight","onResize","debounceResize","ResponsiveWrapper"],"mappings":"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"}